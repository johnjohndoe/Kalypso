package org.kalypso.ui.gazetter.view;

import org.eclipse.swt.widgets.Composite;
import org.eclipse.ui.part.*;
import org.eclipse.jface.viewers.*;
import org.eclipse.swt.graphics.Image;
import org.eclipse.jface.action.*;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.*;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.SWT;

/**
 * @author doemming
 */
public class GazetterView extends ViewPart
{

  private GazetteerViewer m_viewer;

  /**
   * 
   */
  public GazetterView( )
  {
  }

  /**
   * This is a callback that will allow us to create the viewer and initialize it.
   */
  public void createPartControl( Composite parent )
  {
    m_viewer = new GazetteerViewer( parent );
    m_viewer.setContentProvider( new ViewContentProvider() );
    m_viewer.setLabelProvider( new ViewLabelProvider() );
    m_viewer.setInput( getViewSite() );
    makeActions();
    hookContextMenu();
    hookDoubleClickAction();
    contributeToActionBars();
  }

  private void hookContextMenu( )
  {
    MenuManager menuMgr = new MenuManager( "#PopupMenu" );
    menuMgr.setRemoveAllWhenShown( true );
    menuMgr.addMenuListener( new IMenuListener()
    {
      public void menuAboutToShow( IMenuManager manager )
      {
        GazetterView.this.fillContextMenu( manager );
      }
    } );
    Menu menu = menuMgr.createContextMenu( m_viewer.getControl() );
    m_viewer.getControl().setMenu( menu );
    getSite().registerContextMenu( menuMgr, m_viewer );
  }

  private void contributeToActionBars( )
  {
    IActionBars bars = getViewSite().getActionBars();
    fillLocalPullDown( bars.getMenuManager() );
    fillLocalToolBar( bars.getToolBarManager() );
  }

  private void fillLocalPullDown( IMenuManager manager )
  {
    manager.add( action1 );
    manager.add( new Separator() );
    manager.add( action2 );
  }

  private void fillContextMenu( IMenuManager manager )
  {
    manager.add( action1 );
    manager.add( action2 );
    // Other plug-ins can contribute there actions here
    manager.add( new Separator( IWorkbenchActionConstants.MB_ADDITIONS ) );
  }

  private void fillLocalToolBar( IToolBarManager manager )
  {
    manager.add( action1 );
    manager.add( action2 );
  }

  private void makeActions( )
  {
    action1 = new Action()
    {
      public void run( )
      {
        showMessage( "Action 1 executed" );
      }
    };
    action1.setText( "Action 1" );
    action1.setToolTipText( "Action 1 tooltip" );
    action1.setImageDescriptor( PlatformUI.getWorkbench().getSharedImages().getImageDescriptor( ISharedImages.IMG_OBJS_INFO_TSK ) );

    action2 = new Action()
    {
      public void run( )
      {
        showMessage( "Action 2 executed" );
      }
    };
    action2.setText( "Action 2" );
    action2.setToolTipText( "Action 2 tooltip" );
    action2.setImageDescriptor( PlatformUI.getWorkbench().getSharedImages().getImageDescriptor( ISharedImages.IMG_OBJS_INFO_TSK ) );
    doubleClickAction = new Action()
    {
      public void run( )
      {
        ISelection selection = m_viewer.getSelection();
        Object obj = ((IStructuredSelection) selection).getFirstElement();
        showMessage( "Double-click detected on " + obj.toString() );
      }
    };
  }

  private void hookDoubleClickAction( )
  {
    m_viewer.addDoubleClickListener( new IDoubleClickListener()
    {
      public void doubleClick( DoubleClickEvent event )
      {
        doubleClickAction.run();
      }
    } );
  }

  private void showMessage( String message )
  {
    MessageDialog.openInformation( m_viewer.getControl().getShell(), "GazetterView", message );
  }

  /**
   * Passing the focus request to the viewer's control.
   */
  public void setFocus( )
  {
    m_viewer.getControl().setFocus();
  }
}