package org.kalypso.model.wspm.pdb.db.mapping;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.kalypso.commons.java.util.AbstractModelObject;
import org.kalypso.model.wspm.pdb.db.constants.EventConstants;

/**
 * Event generated by hbm2java
 */
@Entity
@Table(name = "event", schema = "pdb", uniqueConstraints = @UniqueConstraint(columnNames = { "name", "water_body" }))
public class Event extends AbstractModelObject implements Serializable, EventConstants, IElementWithDates
{
  private BigDecimal m_id;

  private WaterBody m_waterBody;

  private String m_name;

  private Date m_creationDate;

  private Date m_editingDate;

  private String m_editingUser;

  private Date m_measurementDate;

  private String m_source;

  private TYPE m_type = TYPE.Measurement;

  private WL_TYPE m_wlType = WL_TYPE.Wl_1d;

  private String m_description;

  private Set<WaterlevelFixation> m_waterlevelFixations = new HashSet<WaterlevelFixation>( 0 );

  private State m_state;

  private StyleArray m_styleArray;

  public Event( )
  {
  }

  public Event( final BigDecimal id, final WaterBody waterBody, final String name, final Date creationDate, final Date editingDate, final String editingUser )
  {
    m_id = id;
    m_waterBody = waterBody;
    m_name = name;
    m_creationDate = creationDate;
    m_editingDate = editingDate;
    m_editingUser = editingUser;
  }

  public Event( final BigDecimal id, final WaterBody waterBody, final String name, final Date creationDate, final Date editingDate, final String editingUser, final Date measurementDate, final String source, final TYPE type, final String description, final Set<WaterlevelFixation> waterlevelFixations )
  {
    m_id = id;
    m_waterBody = waterBody;
    m_name = name;
    m_creationDate = creationDate;
    m_editingDate = editingDate;
    m_editingUser = editingUser;
    m_measurementDate = measurementDate;
    m_source = source;
    m_type = type;
    m_description = description;
    m_waterlevelFixations = waterlevelFixations;
  }

  @Id
  @Column(name = "id", unique = true, nullable = false, precision = 20, scale = 0)
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "event_id_seq")
  @SequenceGenerator(name = "event_id_seq", sequenceName = "pdb.seq_pdb")
  public BigDecimal getId( )
  {
    return m_id;
  }

  public void setId( final BigDecimal id )
  {
    m_id = id;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "water_body", nullable = false)
  public WaterBody getWaterBody( )
  {
    return m_waterBody;
  }

  public void setWaterBody( final WaterBody waterBody )
  {
    final Object oldValue = m_waterBody;

    m_waterBody = waterBody;

    firePropertyChange( PROPERTY_WATER_BODY, oldValue, waterBody );
  }

  @Column(name = "name", nullable = false, length = 100)
  public String getName( )
  {
    return m_name;
  }

  public void setName( final String name )
  {
    final Object oldValue = m_name;

    m_name = name;

    firePropertyChange( PROPERTY_NAME, oldValue, name );
  }

  @Override
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "creation_date", nullable = false, length = 22)
  public Date getCreationDate( )
  {
    return m_creationDate;
  }

  public void setCreationDate( final Date creationDate )
  {
    m_creationDate = creationDate;
  }

  @Override
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "editing_date", nullable = false, length = 22)
  public Date getEditingDate( )
  {
    return m_editingDate;
  }

  public void setEditingDate( final Date editingDate )
  {
    m_editingDate = editingDate;
  }

  @Override
  @Column(name = "editing_user", nullable = false, length = 50)
  public String getEditingUser( )
  {
    return m_editingUser;
  }

  public void setEditingUser( final String editingUser )
  {
    m_editingUser = editingUser;
  }

  @Override
  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "measurement_date", length = 22)
  public Date getMeasurementDate( )
  {
    return m_measurementDate;
  }

  public void setMeasurementDate( final Date measurementDate )
  {
    m_measurementDate = measurementDate;
  }

  @Column(name = "source")
  public String getSource( )
  {
    return m_source;
  }

  public void setSource( final String source )
  {
    final Object oldValue = m_source;

    m_source = source;

    firePropertyChange( PROPERTY_SOURCE, oldValue, source );
  }

  @Column(name = "type", length = 50)
  @Enumerated(EnumType.STRING)
  public TYPE getType( )
  {
    return m_type;
  }

  public void setType( final TYPE type )
  {
    final Object oldValue = m_type;

    m_type = type;

    firePropertyChange( PROPERTY_TYPE, oldValue, type );
  }

  @Column(name = "wl_type", length = 25)
  @Enumerated(EnumType.STRING)
  public WL_TYPE getWlType( )
  {
    return m_wlType;
  }

  public void setType( final WL_TYPE wlType )
  {

    m_wlType = wlType;

  }

  @Column(name = "description")
  public String getDescription( )
  {
    return m_description;
  }

  public void setDescription( final String description )
  {
    m_description = description;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
  public Set<WaterlevelFixation> getWaterlevelFixations( )
  {
    return m_waterlevelFixations;
  }

  public void setWaterlevelFixations( final Set<WaterlevelFixation> waterlevelFixations )
  {
    m_waterlevelFixations = waterlevelFixations;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "state_id")
  public State getState( )
  {
    return m_state;
  }

  public void setState( final State state )
  {
    m_state = state;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "style_array_id")
  public StyleArray getStyleArray( )
  {
    return m_styleArray;
  }

  public void setStyleArray( final StyleArray styleArray )
  {
    m_styleArray = styleArray;
  }
}