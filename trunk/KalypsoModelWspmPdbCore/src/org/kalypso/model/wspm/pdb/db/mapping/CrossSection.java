package org.kalypso.model.wspm.pdb.db.mapping;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.vividsolutions.jts.geom.LineString;

/**
 * CrossSection generated by hbm2java
 */
@Entity
@Table(name = "cross_section", schema = "pdb_admin", uniqueConstraints = @UniqueConstraint(columnNames = "name"))
public class CrossSection implements java.io.Serializable
{

  private BigDecimal id;

  private WaterBody waterBody;

  private State state;

  private String name;

  private LineString line;

  private BigDecimal station;

  private Date creationDate;

  private Date editingDate;

  private String editingUser;

  private Date measurementDate;

  private String description;

  private Set<CrossSectionPart> crossSectionParts = new HashSet<CrossSectionPart>( 0 );

  public CrossSection( )
  {
  }

  public CrossSection( final BigDecimal id, final WaterBody waterBody, final State state, final String name, final BigDecimal station, final Date creationDate, final Date editingDate, final String editingUser )
  {
    this.id = id;
    this.waterBody = waterBody;
    this.state = state;
    this.name = name;
    this.station = station;
    this.creationDate = creationDate;
    this.editingDate = editingDate;
    this.editingUser = editingUser;
  }

  public CrossSection( final BigDecimal id, final WaterBody waterBody, final State state, final String name, final LineString line, final BigDecimal station, final Date creationDate, final Date editingDate, final String editingUser, final Date measurementDate, final String description, final Set<CrossSectionPart> crossSectionParts )
  {
    this.id = id;
    this.waterBody = waterBody;
    this.state = state;
    this.name = name;
    this.line = line;
    this.station = station;
    this.creationDate = creationDate;
    this.editingDate = editingDate;
    this.editingUser = editingUser;
    this.measurementDate = measurementDate;
    this.description = description;
    this.crossSectionParts = crossSectionParts;
  }

  @Id
  @Column(name = "id", unique = true, nullable = false, precision = 20, scale = 0)
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "crosssection_id_seq")
  @SequenceGenerator(name = "crosssection_id_seq", sequenceName = "seq_pdb")
  public BigDecimal getId( )
  {
    return this.id;
  }

  public void setId( final BigDecimal id )
  {
    this.id = id;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "water_body", nullable = false)
  public WaterBody getWaterBody( )
  {
    return this.waterBody;
  }

  public void setWaterBody( final WaterBody waterBody )
  {
    this.waterBody = waterBody;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "state", nullable = false)
  public State getState( )
  {
    return this.state;
  }

  public void setState( final State state )
  {
    this.state = state;
  }

  @Column(name = "name", unique = true, nullable = false, length = 50)
  public String getName( )
  {
    return this.name;
  }

  public void setName( final String name )
  {
    this.name = name;
  }

  @Column(name = "line", columnDefinition = "Geometry")
  public LineString getLine( )
  {
    return this.line;
  }

  public void setLine( final LineString line )
  {
    this.line = line;
  }

  @Column(name = "station", nullable = false, precision = 8, scale = 1)
  public BigDecimal getStation( )
  {
    return this.station;
  }

  public void setStation( final BigDecimal station )
  {
    this.station = station;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "creation_date", nullable = false, length = 22)
  public Date getCreationDate( )
  {
    return this.creationDate;
  }

  public void setCreationDate( final Date creationDate )
  {
    this.creationDate = creationDate;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "editing_date", nullable = false, length = 22)
  public Date getEditingDate( )
  {
    return this.editingDate;
  }

  public void setEditingDate( final Date editingDate )
  {
    this.editingDate = editingDate;
  }

  @Column(name = "editing_user", nullable = false, length = 50)
  public String getEditingUser( )
  {
    return this.editingUser;
  }

  public void setEditingUser( final String editingUser )
  {
    this.editingUser = editingUser;
  }

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "measurement_date", length = 22)
  public Date getMeasurementDate( )
  {
    return this.measurementDate;
  }

  public void setMeasurementDate( final Date measurementDate )
  {
    this.measurementDate = measurementDate;
  }

  @Column(name = "description")
  public String getDescription( )
  {
    return this.description;
  }

  public void setDescription( final String description )
  {
    this.description = description;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "crossSection")
  public Set<CrossSectionPart> getCrossSectionParts( )
  {
    return this.crossSectionParts;
  }

  public void setCrossSectionParts( final Set<CrossSectionPart> crossSectionParts )
  {
    this.crossSectionParts = crossSectionParts;
  }

}
