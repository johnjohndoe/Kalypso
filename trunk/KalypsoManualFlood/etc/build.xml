<?xml version="1.0" encoding="UTF-8"?>
<project name="kalypso-manual-common" default="valid" basedir="..">
	<!--
		Dieses Skript liefert allgemeine Funktionen zum generieren der Kalypso Handbücher
		und ist dazu gedacht, von den speziellen build-skripten aufgerufen zu werden.
		
		Die von den einzelnen Funktionen benötigten properties sind jeweils dort aufgelistet.
	-->

	<!-- manual.project muss von aussen gesetzt werden. 
		falls nicht, wird dieses Plugin selbst genommen
	-->
	<property name="manual.project" value="${workspace}/KalypsoManualFlood" description="Default Wert ist dieses Projekt selbst. Dann wird nichts gemerged." />

	<property name="src.other.dir" value="${manual.project}/src" description="This dir will be merged into the common src." />
	<property name="deploy.plugin.dir" value="${manual.project}" description="This is the dir to where the eclipse-manual will be deployed." />

	<property name="src.dir" value="src" />
	<property name="build.dir" value="${manual.project}/build" />
	<property name="build.merged.dir" value="${build.dir}/merged" />
	<property name="build.merged.xsl.dir" value="${build.merged.dir}/xsl" />
	<property name="build.profiling.dir" value="${build.dir}/profiled" />

	<property name="dist.dir" value="${manual.project}/dist" />
	<property name="dist.pdf.dir" value="${dist.dir}/pdf" />
	<property name="dist.html.dir" value="${dist.dir}/html" />
	<property name="dist.eclipse.dir" value="${dist.dir}/eclipse" />
	<property name="dist.fo.dir" value="${dist.dir}/fo" />

	<property name="css.dir" value="${build.merged.dir}/css" />
	<property name="image.name" value="img" />
	<property name="image.dir" value="${build.merged.dir}/${image.name}" />

	<property name="doc.main" value="driver.xml" />
	<property name="doc.path" value="${build.merged.dir}/${doc.main}" />
	<property name="doc.profiled.path" value="${build.profiling.dir}/docbook-profiled.xml" />

	<property name="publishing.dir" value="${workspace}/KalypsoBuild/publishing" />
	<property name="docbook.dtd.dir" value="${publishing.dir}/docbook-xml-4.4" />
	<property name="docbook.xsl.dir" value="${publishing.dir}/docbook-xsl-1.69.1" />
	<property name="docbook.latex.xsl.dir" value="${publishing.dir}/db2latex-xsl-0.8pre1_patched" />
	<property name="xincluder.xsd.dir" value="${publishing.dir}/xincluder" />

	<xmlcatalog id="docbookCatalog">
		<dtd publicId="-//OASIS//DTD DocBook XML V4.4//EN" location="${docbook.dtd.dir}/docbookx.dtd" />
		<dtd publicId="profile.xsl" location="${docbook.xsl.dir}/profiling/profile.xsl" />
		<dtd publicId="chunk.xsl" location="${docbook.xsl.dir}/html/chunk.xsl" />
		<dtd publicId="eclipse-ex.xsl" location="${docbook.xsl.dir}/eclipse/eclipse-ex.xsl" />
		<dtd publicId="fo-docbook.xsl" location="${docbook.xsl.dir}/fo/docbook.xsl" />
		<dtd publicId="latex-docbook.xsl" location="${docbook.latex.xsl.dir}/xsl/docbook.xsl" />
		<dtd publicId="http://www.w3.org/2001/XInclude" location="${xincluder.xsd.dir}/xincluder.xsd" />
	</xmlcatalog>

	<!-- TODO: remove cleanup dependency and only clean if necessary -->
	<target name="init" depends="cleanup-build" description="Baut die Verzeichnisstruktur der Ausgabe und Merged die Spezialdaten mit den allgemeinen.">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.merged.dir}" />
		<mkdir dir="${build.profiling.dir}" />

		<mkdir dir="${dist.pdf.dir}" />
		<mkdir dir="${dist.html.dir}" />
		<mkdir dir="${dist.eclipse.dir}" />
		<mkdir dir="${dist.fo.dir}" />

		<echo message="${src.other.dir}" />
		<copy todir="${build.merged.dir}">
			<fileset dir="${src.dir}/" includes="**/*" defaultexcludes="false" excludes="**/.svn/**"/>
		</copy>
		
		<copy todir="${build.merged.dir}" overwrite="true">
			<fileset dir="${src.other.dir}" includes="**/*" excludes="**/.svn/**"/>
		</copy>
	</target>

	<target name="cleanup" description="Löscht alles erzeugte" depends="cleanup-build,cleanup-dist">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.dir}" includes="*/**" />
			<fileset dir="${dist.dir}" includes="*/**" />
		</delete>
	</target>

  <target name="cleanup-build" description="Löscht alles unterhalb des ${build.dir}">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.dir}" includes="*/**" />
		</delete>
	</target>
  <target name="cleanup-dist" description="Löscht alles unterhalb des ${dist.dir}">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${dist.dir}" includes="*/**" />
		</delete>
	</target>

	<target name="valid" description="Validiert das ${src.dir}/${doc.name}" depends="init">
		<antcall target="xmlvalid">
			<param name="xmlvalid.xml" value="${doc.path}" />
		</antcall>
	</target>

	<target name="profiling" description="Hilfsfunktion zum Profilen von DocBook" depends="init">
		<!-- First we do the profiling -->
		<xslt basedir="${build.merged.dir}" in="${doc.path}" out="${doc.profiled.path}" style="${build.merged.xsl.dir}/common-profile.xsl">
			<xmlcatalog refid="docbookCatalog" />
		</xslt>
		
		<!-- Then we resolve the xincludes -->
<!--		WÄRE SCHÖN WENNS GINGE
		<java classname="com.elharo.xml.xinclude.SAXXIncluder" fork="false" args="${doc.profiled.path}" logerror="true"> 
			<classpath location="${workspace}/KalypsoManualFlood/lib/xincluder/xincluder.jar"></classpath>
		</java>
-->		

<!--		    -cp "../XInclude/xincluder.jar:../xerces-2_0_2/xercesImpl.jar"
		      bookfile.xml  >  resolved.xml
-->		
		
	</target>

	<target name="html" depends="profiling" description="Erzeugt das Benutzerhandbuch - HTML-Version">
		<xslt basedir="${build.merged.dir}" in="${doc.profiled.path}" out="${dist.html.dir}/dummy.html" style="${build.merged.xsl.dir}/common-html.xsl">
			<xmlcatalog refid="docbookCatalog" />
		</xslt>

		<copy todir="${dist.html.dir}">
			<fileset dir="${css.dir}" includes="*.*" />
		</copy>

		<!-- TODO: filter the needed images from the profiled docbook and copy only those -->
		<mkdir dir="${dist.html.dir}/img" />
		<copy todir="${dist.html.dir}/img">
			<fileset dir="${image.dir}" includes="**/*" />
		</copy>
	</target>

	<target name="eclipse-help" depends="profiling" description="Erzeugt das Benutzerhandbuch - Online-Help für Eclipse">
		<xslt basedir="${build.merged.dir}" in="${doc.profiled.path}" out="${dist.eclipse.dir}/dummy.html" style="${build.merged.xsl.dir}/common-eclipse.xsl">
			<outputproperty name="encoding" value="UTF-8" />
			<outputproperty name="indent" value="yes" />
			<!-- Wichtig: Methode 'xml' bewirkt, dass die Ausgabe nicht mit den XMl-Entitäten stattfindet
			das schluckt eclipse aber nicht -->
			<outputproperty name="method" value="xml" />
			<xmlcatalog refid="docbookCatalog" />
		</xslt>

		<copy todir="${dist.eclipse.dir}">
			<fileset dir="${css.dir}" includes="*.*" />
		</copy>

		<mkdir dir="${dist.eclipse.dir}/img" />
		<copy todir="${dist.eclipse.dir}/img">
			<fileset dir="${image.dir}" includes="**/*" />
		</copy>

		<!-- Deploy the stuff back to the given Plugin -->
		<copy todir="${manual.project}" file="${dist.eclipse.dir}/toc.xml" />
		<copy todir="${manual.project}" file="${dist.eclipse.dir}/contexts.xml" />
		<copy todir="${manual.project}/src/org/kalypso/KalypsoManualFlood/help" file="${dist.eclipse.dir}/IKalypsoHelpContextIds.java" />
		<zip destfile="${manual.project}/doc.zip" basedir="${dist.eclipse.dir}" includes="**/*" excludes="*.xml" />
	</target>

	<target name="pdf" description="Erstellt das Handbuch im PDF Format" depends="profiling">

		<tempfile property="tex.tmp.dir" destdir="${build.dir}" prefix="texTmpDir" />
		<mkdir dir="${tex.tmp.dir}" />

		<copy todir="${tex.tmp.dir}/${image.name}">
			<fileset dir="${image.dir}" casesensitive="no" includes="**/*.*" excludes="**/.svn/**" />
		</copy>

		<antcall target="pdfproc">
			<param name="pdfproc.out.dir" value="${dist.pdf.dir}" />
			<param name="pdfproc.out.name" value="manual" />
			<param name="pdfproc.xsl" value="${build.merged.xsl.dir}/common-tex.xsl" />
			<param name="pdfproc.xml" value="${doc.profiled.path}" />
			<param name="tex.dir" value="${tex.tmp.dir}" />
		</antcall>

		<delete dir="${tex.dir}" includeemptydirs="true" />
	</target>

	<target name="pdf-fo" depends="init,profiling" description="Erzeugt das Benutzerhandbuch - PDF-Version mit FO">

		<xslt basedir="${build.merged.dir}" in="${doc.profiled.path}" out="${dist.fo.dir}/manual.fo" style="${build.merged.xsl.dir}/common-fo.xsl">
			<outputproperty name="encoding" value="UTF-8" />
			<outputproperty name="indent" value="yes" />
			<xmlcatalog refid="docbookCatalog" />
		</xslt>

		<antcall target="fop">
			<param name="fop.fo" value="${dist.fo.dir}/manual.fo" />
			<param name="fop.pdf" value="${dist.fo.dir}/manual.pdf" />
		</antcall>
	</target>

	<!-- hier beginnen die internen targets -->

	<target name="pdfproc" description="Hilfsfunktion zum generiern von PDF aus DocBook">
		<!-- Benötigte Parameter: 
  					'pdfproc.out.name'  Name der Ausgabedatei
  					'pdfproc.out.dir'   Ausgabeverzeichnis
  					'pdfproc.xsl		DocBook XSL
  					'pdfproc.xml'		DocBook XML
  					'tex.dir'			Temporary Dir vor tex processing
   	     -->

		<xslt basedir="${build.merged.dir}" in="${pdfproc.xml}" out="${tex.dir}/${pdfproc.out.name}.tex" style="${pdfproc.xsl}">
			<outputproperty name="encoding" value="UTF-8" />
			<outputproperty name="indent" value="yes" />
			<xmlcatalog refid="docbookCatalog" />
		</xslt>

		<exec executable="texify.exe" dir="${tex.dir}">
			<arg value="-q" />
			<arg value="${pdfproc.out.name}.tex" />
		</exec>
<!--
		<exec executable="makeindex.exe" dir="${tex.dir}">
			<arg value="${pdfproc.out.name}" />
		</exec>
-->
		<exec executable="texify.exe" dir="${tex.dir}">
			<arg value="-q" />
			<arg value="${pdfproc.out.name}.tex" />
		</exec>
    
		  <!-- three times! needed for correct toc numbering -->
		<exec executable="texify.exe" dir="${tex.dir}">
			<arg value="-q" />
			<arg value="${pdfproc.out.name}.tex" />
		</exec>

		<copy todir="${pdfproc.out.dir}" file="${tex.dir}/${pdfproc.out.name}.pdf" />
	</target>

	<target name="xmlvalid" description="Hilfsfunktion zum Validieren von XML">
		<!-- Benötigte Parameter: 'xmlvalid.xml'  -->
		<xmlvalidate file="${xmlvalid.xml}">
			<xmlcatalog refid="docbookCatalog" />
		</xmlvalidate>
	</target>

	<target name="fop" description="Hilfsfunktion zum generieren von PDF aus FOP">
		<!-- Benötigte Parameter: 
    					'fop.fo'  Name der FO-Eingangsdatei
    					'fop.pdf' Name der PDF-Ausgangsdatei
    	-->

		<!-- Replace this with the direct call into the fop.jar -->
		<exec executable="fop.bat" failonerror="true">
			<arg line="-fo ${fop.fo} -pdf ${fop.pdf}" />
		</exec>
	</target>
</project>