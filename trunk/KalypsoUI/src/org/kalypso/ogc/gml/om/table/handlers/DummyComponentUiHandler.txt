/*----------------    FILE HEADER KALYPSO ------------------------------------------
 *
 *  This file is part of kalypso.
 *  Copyright (C) 2004 by:
 * 
 *  Technical University Hamburg-Harburg (TUHH)
 *  Institute of River and coastal engineering
 *  Denickestraﬂe 22
 *  21073 Hamburg, Germany
 *  http://www.tuhh.de/wb
 * 
 *  and
 *  
 *  Bjoernsen Consulting Engineers (BCE)
 *  Maria Trost 3
 *  56070 Koblenz, Germany
 *  http://www.bjoernsen.de
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 *  Contact:
 * 
 *  E-Mail:
 *  belger@bjoernsen.de
 *  schlienger@bjoernsen.de
 *  v.doemming@tuhh.de
 *   
 *  ---------------------------------------------------------------------------*/
package org.kalypso.ogc.gml.om.table;

import org.apache.commons.lang.ObjectUtils;
import org.eclipse.jface.viewers.CellEditor;
import org.eclipse.swt.SWT;
import org.kalypso.gmlschema.types.ITypeRegistry;
import org.kalypso.observation.phenomenon.DictionaryPhenomenon;
import org.kalypso.observation.result.IComponent;
import org.kalypso.ogc.gml.gui.GuiTypeRegistrySingleton;
import org.kalypso.ogc.gml.gui.IGuiTypeHandler;
import org.kalypso.ogc.gml.gui.XsdBaseGuiTypeHandler;
import org.kalypso.template.featureview.ColumnDescriptor;
import org.kalypso.template.featureview.ColumnTypeDescriptor;
import org.kalypso.util.swt.SWTUtilities;

/**
 * @author Dirk Kuch
 */
public class DummyComponentUiHandler implements IComponentUiHandler
{
  public DummyComponentUiHandler( )
  {
    // TODO Auto-generated constructor stub
  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#addColumn(java.lang.Object)
   */
  public void addColumn( final Object tableviewer )
  {
    // TODO: change to object-id
    final String id = component.getId();

    final int styleForComponent = styleForComponent( component );
    // TODO: style should be independend from alignment of values
    // introduce own attribute for column-header style
    // final int style = SWT.CENTER;
    final int style = styleForComponent & ~SWT.READ_ONLY;
    final int ro = styleForComponent & SWT.READ_ONLY;

    final CellEditor editor;
    final String label = component.getName();
    final String tooltip = component.getDescription();
    final boolean editable = ro != SWT.READ_ONLY;

    m_tableViewer.addColumn( id, label, tooltip, 100, editable, style );

  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#createCellEditor()
   */
  public CellEditor createCellEditor( )
  {
    // editor = TupleResultProviderFactory.getCellEditor( component, m_tableViewer, SWT.NONE, editable );

    // TODO Auto-generated method stub
    return null;
  }

  private int styleForComponent( final IComponent component )
  {
    String featureType = null;
    if( component.getPhenomenon() instanceof DictionaryPhenomenon )
    {
      final DictionaryPhenomenon phenomenon = (DictionaryPhenomenon) component.getPhenomenon();
      featureType = phenomenon.getDictionaryUrn();
    }

    final String id = component.getId();

    final ColumnDescriptor descriptor = m_columnDescriptors.get( id );
    final ColumnTypeDescriptor descType = m_columnTypeDescriptors.get( featureType );

    if( (descriptor == null) && (descType == null) )
      return SWT.CENTER;

    final String alignment;
    if( descriptor != null )
      alignment = descriptor.getAlignment();
    else if( descType != null )
      alignment = descType.getAlignment();
    else
      alignment = null;

    if( alignment == null )
      return SWT.CENTER;

    final int style = SWTUtilities.createStyleFromString( alignment );

    if( style == SWT.NONE )
      return SWT.CENTER;

    return style;
  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#getIdentity()
   */
  public String getIdentity( )
  {
    return ObjectUtils.identityToString( this );
  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#formatValue(java.lang.Object)
   */
  public Object formatValue( final Object value )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#getComponent()
   */
  public IComponent getComponent( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#isEditable()
   */
  public boolean isEditable( )
  {
    final int styleForComponent = styleForComponent( component );
    final int ro = (styleForComponent & SWT.READ_ONLY);
    if( ro == SWT.READ_ONLY )
      return false;

    return true;
  }

  /**
   * @see org.kalypso.ogc.gml.om.table.IComponentUiHandler#parseText(java.lang.String)
   */
  public Object parseText( final String valueStr )
  {
    final XsdBaseGuiTypeHandler handler = handlerForProperty( component );
    final ColumnDescriptor descriptor = m_provider.getColumnDescriptors().get( component.getId() );
    final String formatHint = descriptor == null ? null : descriptor.getParseFormat();

    final Object valueToSet = value == null ? null : handler.parseText( value.toString(), formatHint );

    final String valueStr = value == null ? null : value.toString();

    // TODO Auto-generated method stub
    return null;
  }

  private XsdBaseGuiTypeHandler handlerForProperty( final IComponent component )
  {
    final ITypeRegistry<IGuiTypeHandler> typeRegistry = GuiTypeRegistrySingleton.getTypeRegistry();
    final IGuiTypeHandler handler = typeRegistry.getTypeHandlerForTypeName( component.getValueTypeName() );
    if( handler instanceof XsdBaseGuiTypeHandler )
      return (XsdBaseGuiTypeHandler) handler;

    return null;
  }

}
