<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="zml.kalypso.org" elementFormDefault="qualified" 
	attributeFormDefault="unqualified" xmlns="zml.kalypso.org" 
	xmlns:xs="http://www.w3.org/2001/XMLSchema" 
	xmlns:xlink="http://www.w3.org/1999/xlinkext">
	<xs:import namespace="http://www.w3.org/1999/xlinkext" 
		schemaLocation="../xlink/xlinksext.xsd"/>
	<xs:element name="observation">
		<xs:annotation>
			<xs:documentation><![CDATA[
				an observation made by a sensor. This schema is 
				derived from the OGC Draft for Observation and Measurements 
				which can be found online at: 
				http://www.opengeospatial.org/docs/03-022r3.pdf.
				
				This ZML-Schema is build to allow three variations:
				 - inline
				 - linked
				 - block-inline
				 
				The inline one makes use of the valueArray element of the axis. 
				This allows to write the values of an axis as an array directly
				in the axis element.
				
				The linked one makes use of the valueLink element of the axis.
				In that case the values are not stored directly in the ZML file 
				but in another file (which format must be CSV oriented) which 
				is linked using an Xlink. The axis solely specifies how to reach 
				the values.
				
				The block-inline one makes use of the valueLink element of the axis
				and of the data element of the observation. This looks like linked
				but the values are stored in the <data/> element directly in the 
				zml file.
				]]> 
				</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="name" type="xs:string">
					<xs:annotation>
						<xs:documentation>The name of the observation, used for 
							information purposes towards the user of the 
							system</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="target" type="xlink:SimpleLinkType" 
					minOccurs="0" maxOccurs="1">
					<xs:annotation>
						<xs:documentation>The target of the observation, that 
							is the thing or object being observed. This is a 
							XLink which can point to pretty much 
							anything</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="metadataList" type="MetadataListType" 
					minOccurs="0">
					<xs:annotation>
						<xs:documentation>A list of metadata (property-value 
							pairs)</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="axis" type="AxisType" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>An axis is the core part of the 
							observation. It defines what kind of information is 
							collected. There are usually two axes for 
							timeseries for instance. Kalypso makes also 
							extensive use of a status axis. Each axis contains 
							its values. Say there is a date axis, then it 
							contains dates. Tupples can be formed from the set 
							of axes by taking the elements at position i for 
							each axis: Tupple(i) = [ element@i@axis0, 
							element@i@axis1, ..., element@i@axisN ] 
							</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="data" type="xs:string" minOccurs="0" 
					maxOccurs="1" >
					<xs:annotation>
						<xs:documentation>This element is optional. It is used 
							with the block-inline concept and contains the values
							in a CDATA block.
						</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="editable" type="xs:boolean" use="optional" 
				default="true">
				<xs:annotation>
					<xs:documentation>specifies if the observation is editable
					</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="MetadataType">
		<xs:sequence>
			<xs:element name="data" type="xs:string" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The data element is optional and
						is an alternative way to specify the value
						of the property (for instance a CDATA block
						can be used to specify a complex value such 
						as some xml)</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The name must be unique within the 
					metadalist</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" type="xs:anySimpleType" use="optional">
			<xs:annotation>
				<xs:documentation>This is the value which is associated to the 
					name, thus building a property-value pair</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="MetadataListType">
		<xs:sequence>
			<xs:element name="metadata" type="MetadataType" minOccurs="0" 
				maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AxisType">
		<xs:choice>
			<xs:element name="valueLink">
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="xlink:SimpleLinkType">
							<xs:attribute name="separator" type="xs:string" 
								use="optional" default=";">
								<xs:annotation>
									<xs:documentation>describes which kind of 
										character is used to separate the 
										value-items. Its use is optional since 
										it defaults to a semi-colon. Using a 
										separator, a standard CSV-parser will 
										be used to fetch the values. 
										</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="regexp" type="xs:string" 
								use="optional" default="">
								<xs:annotation>
									<xs:documentation>instead of using a 
										separator, one can use the regexp 
										attribute to specify how the line 
										should be parsed. The syntax is the 
										same as the one used in the java regexp 
										package. This attribute is optional 
										since 'separator' is used as default. 
										If this attribute is provided, a 
										regex-CSV-parser will be used to fetch 
										the values.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="column" type="xs:int" 
								use="required">
								<xs:annotation>
									<xs:documentation>determines which column 
										of the CSV-file or datablock contains 
										the values for this 
										axis</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="line" type="xs:int" 
								use="optional" default="1">
								<xs:annotation>
									<xs:documentation>determines up from which 
										line the values should be parsed. It is 
										optional, it defaults to position 
										1.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="valueArray">
				<xs:annotation>
					<xs:documentation>this element is mutually exclusive with 
						valueLink for an axis. Using this element you can 
						provide the values of the axis directly within the 
						tag.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="separator" type="xs:string" 
								use="optional" default=" ">
								<xs:annotation>
									<xs:documentation>describes which kind of 
										character is used to separate the 
										value-items. Its use is optional since 
										it defaults to a space-character.
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>the name of the axis, it is used as
					label in a gui for instance. Each axis should have
					its own unique name.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>the type of the axis describes that kind of 
					data it has. It is used uniformly and actions or layouts 
					are derived according to the type. For instance, "N" is 
					used as a precipitation type within the concept of 
					timeseries in kalypso. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="unit" type="xs:string" use="optional" default="">
			<xs:annotation>
				<xs:documentation>the unit string, should be SI-derived. The
					unit is also used uniformly throughout kalypso.					
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="key" type="xs:boolean" use="optional" 
			default="false">
			<xs:annotation>
				<xs:documentation>the key attribute specifies whether
					this axis' values are key values. Key axis have unique
					values. For instance timeseries have a date key-axis.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="datatype" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>it describes what the data type of the values 
					is. Syntax: TYPE[#FORMAT] with TYPE the name of the value 
					type (like integer, date ...) and FORMAT the format string 
					(in the java sense). FORMAT is optional and must be 
					preceeded by a '#' char if it is specified. 
					</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
</xs:schema>