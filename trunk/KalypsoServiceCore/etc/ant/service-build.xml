<?xml version="1.0"?>
<project name="coreservicesbuild" default="deploy">

	<dirname property="coreservicesbuild.basedir" file="${ant.file.coreservicesbuild}" />

	<property file="${workspace}/KalypsoBuild/common.properties" />
	<property file="${coreservicesbuild.basedir}/service-build.properties" />

	<!-- TODO: define these elements in your own project 
	
		<property name="project" value="full path of the project"/>
		<property name="project-name" value="used as name for jar file"/>
	-->

	<import file="${workspace}/KalypsoBuild/common-tomcat/build.xml" />

	<path id="jaxws.classpath">
		<fileset dir="${jwsdp}/jaxb/lib" includes="*.jar" />
		<fileset dir="${jwsdp}/jaxp/lib" includes="*.jar" />
		<fileset dir="${jwsdp}/jaxrpc/lib" includes="*.jar" />
		<fileset dir="${jwsdp}/jwsdp-shared/lib" includes="*.jar" />
		<fileset dir="${jwsdp}/saaj/lib" includes="*.jar" />
		<fileset dir="${jwsdp}/jaxws/lib" includes="*.jar" />
	</path>

	<taskdef name="apt" classname="com.sun.tools.ws.ant.Apt">
		<classpath refid="jaxws.classpath" />
	</taskdef>

	<taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen">
		<classpath refid="jaxws.classpath" />
	</taskdef>

	<taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
		<classpath refid="jaxws.classpath" />
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${coreservicesbuild.basedir}/ant-contrib-1.0b2.jar" />
		</classpath>
	</taskdef>

	<target name="prepare">
		<echo message="Project: ${project-name}" />
		<echo message="Package: ${interface.package}" />

		<mkdir dir="${project.deploy}" />
		<mkdir dir="${project.doc}" />

		<mkdir dir="${build.ws.apt}" />
		<mkdir dir="${build.ws.gen}" />
		<mkdir dir="${build.ws.import}" />

		<mkdir dir="${build.war.lib}" />
		<mkdir dir="${build.war.classes}" />
	</target>

	<target name="clean">
		<echo message="Cleaning ${project-name}..." />
		<delete dir="${project.deploy}" />
		<delete dir="${project.doc}" />
		<delete dir="${build.war}" />
		<delete dir="${build.ws}" />
	</target>

	<target name="generate-apt" depends="prepare">
		<echo message="Generates portable artifacts" />
		<apt debug="${flag-debug}" 
			verbose="${flag-verbose}" 
			destdir="${build.ws.apt}" 
			sourcedestdir="${build.ws.apt}" 
			sourcepath="${project.src}">
			<classpath refid="jaxws.classpath" />
			<classpath refid="deploy.classpath" />
			<option key="r" value="${build.ws}" />
			<source dir="${project.src}">
				<include name="**/*.java" />
			</source>
		</apt>
	</target>

	<target name="build-war" depends="generate-apt" description="Creates a deployable WAR file">
		<!-- convert compile path to a fileset in order to copy the libs for runtime dependencies -->
		<pathtofileset name="deploy.libs" pathrefid="deploy.classpath" dir="${workspace}" />
		<copy todir="${build.war.lib}" flatten="true" overwrite="true">
			<fileset refid="deploy.libs" />
		</copy>

		<!--pathtofileset name="deploy.libs" pathrefid="jaxws.classpath" dir="${workspace}" />
		<copy todir="${build.war.lib}" flatten="true" overwrite="true">
			<fileset refid="deploy.libs" />
		</copy-->

		<echo file="${build.war}/WEB-INF/web.xml" message="${web.xml}" />

		<echo file="${build.war}/WEB-INF/sun-jaxws.xml" message="${sun-jaxws.xml}" />

		<war destfile="${war.path}" webxml="${build.war}/WEB-INF/web.xml" basedir="${build.war}" >
			<classes dir="${build.ws.apt}" includes="**/*.class" />
		</war>
	</target>

	<target name="generate-gen-import" depends="generate-apt" description="Erzeugt das wsld File aus dem Service-Interface">
		<wsgen genwsdl="true" resourcedestdir="${build.ws.gen}" sei="${interface.impl}" verbose="${flag-verbose}" servicename="{${wsdl.namespace}}${wsdl.name}">
			<classpath refid="jaxws.classpath" />
			<classpath refid="deploy.classpath" />
			<classpath path="${project.bin}" />
		</wsgen>

		<wsimport debug="${flag-debug}" verbose="${flag-verbose}" keep="true" destdir="${build.ws.import}" wsdl="${build.ws.gen}/${wsdl.name}.wsdl" />
	</target>

	<target name="build-client" depends="generate-gen-import" description="Erzeugt die Bibliothek fuer den Client">
		<echo message="Building client part of service ${service.name} to ${project.deploy}/${client.jar}" />

		<jar jarfile="${project.deploy}/${client.jar}">
			<fileset dir="${build.ws.import}" includes="**/*.class" />
		</jar>
	</target>

</project>
