<xs:schema xmlns="util.gml.kalypso.org" xmlns:layer="types.template.kalypso.org"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xlinkext="http://www.w3.org/1999/xlinkext" targetNamespace="util.gml.kalypso.org"
	elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:import namespace="http://www.w3.org/1999/xlinkext" schemaLocation="../xlink/xlinksext.xsd"/>
	<xs:import namespace="http://www.w3.org/1999/xlink" schemaLocation="../xlink/xlinks.xsd"/>
	<xs:import namespace="types.template.kalypso.org" schemaLocation="../template/layerTypes.xsd"/>
	<xs:element name="gmlconvert">
		<xs:annotation>
			<xs:documentation>
				<pr>Konvertiert eine GML-Datenquelle in ein GML-Datenziel.</pr>
				<pr>Dabei k�n sowohl w㧲end des Lesens oder w㧲end des Schreibens verschiedenen
					Konvertierungen durchgef�erden.</pr>
				<pr>Wie, was, warum etwas konvertiert wird, wird in der jeweiligen Quelle bzw. im
					jeweiligen Ziel definiert.</pr>
				<pr>Auf Codeseite ist es die Klasse org.kalypso.ogc.gml.convert.GmlConvertFactory um
					die sich alles dreht.</pr>
				<pr>Intern werden die Daten in einen GMlWorkspace gelesen, alle Operationen basieren
					dann tatäschlich auf Operationen auf diesen Workspace.</pr>
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="target"/>
				<xs:element ref="source"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="target" type="TargetType" abstract="true">
		<xs:annotation>
			<xs:documentation>Beschreibt, wohin die Daten geschrieben werden.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="TargetType">
		<xs:attributeGroup ref="xlink:locatorLink"/>
	</xs:complexType>
	<xs:element name="csvtarget" type="CsvTargetType" substitutionGroup="target">
		<xs:annotation>
			<xs:documentation>Schreibt die Daten in eine CSV (Comma Separated Values)
			Datei.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="CsvTargetType">
		<xs:complexContent>
			<xs:extension base="TargetType">
				<xs:sequence>
					<xs:element name="column" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Erzeugt eine Spalte in der Ausgabedatei. Der Inhalt
								bezeichnet die Feature-Property, die in diese Spalte geschrieben
								wird.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:simpleContent>
								<xs:extension base="xs:string">
									<xs:attribute name="default" type="xs:string" use="optional"
										default="-">
										<xs:annotation>
											<xs:documentation>Was geschrieben werden soll, wenn die
												abgefragte Property null ist..</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="label" type="xs:string" use="optional">
										<xs:annotation>
											<xs:documentation>Der Spaltenname, falls gesetzt und
												'writeHeader' true ist. Sonst wird der Name der
												Property genommen.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:extension>
							</xs:simpleContent>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="featurePath" type="xs:string">
					<xs:annotation>
						<xs:documentation>Beschreibt die Features, die in die Datei geschrieben
							werden. Muss eine FeatureList sein.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="delemiter" type="xs:string">
					<xs:annotation>
						<xs:documentation>Das Trennzeichen zwischen den
						Spalteneinträgen.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="writeHeader" type="xs:boolean" use="optional" default="false">
					<xs:annotation>
						<xs:documentation>Falls true, wird in die erste Zeile die Spaltennamen
							geschrieben.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="gmltarget" type="GmlTargetType" substitutionGroup="target">
		<xs:annotation>
			<xs:documentation>Schreibt die Daten in eine GMl Datei.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="GmlTargetType">
		<xs:complexContent>
			<xs:extension base="TargetType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="source" type="SourceType" abstract="true">
		<xs:annotation>
			<xs:documentation>
				<pr>Beschreibt, woher die Daten kommen.</pr>
				<pr>Kann prinzipiell alles sein, Datei, Kombination aus Dateien etc.</pr>
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="SourceType"/>
	<xs:element name="gmlsource" type="GmlSourceType" substitutionGroup="source">
		<xs:annotation>
			<xs:documentation>Liest die Daten aus einer GMl Datei.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="GmlSourceType">
		<xs:complexContent>
			<xs:extension base="SourceType">
				<xs:attributeGroup ref="xlink:locatorLink"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:element name="shpsource" type="ShpSourceType" substitutionGroup="source">
		<xs:annotation>
			<xs:documentation>Liest die Daten aus einer Shape-Datei.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ShpSourceType">
		<xs:complexContent>
			<xs:extension base="SourceType">
				<xs:attributeGroup ref="xlink:locatorLink"/>
				<xs:attribute name="crs" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="registersource" type="RegisterSourceType" substitutionGroup="source">
		<xs:annotation>
			<xs:documentation>Holt die Daten aus einem der sog. 'externen-data-map'. Praktisch, um
				ein Skript programmatisch anzusteuern und einen bereits geladenen workspace zu
				verwenden.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="RegisterSourceType">
		<xs:complexContent>
			<xs:extension base="SourceType">
				<xs:attribute name="registeredID" type="xs:string">
					<xs:annotation>
						<xs:documentation>Unter dieser ID wird der Workspace aus der Map
						geholt.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="csvsource" type="CsvSourceType" substitutionGroup="source">
		<xs:annotation>
			<xs:documentation>
				<p>Liest die Daten aus einer CSV Datei.</p>
				<pr>Zur Zeit müssen sowohl alle Spalten die gelesen werden sollen als auch deren Typ
					angegeben werden.</pr>
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="CsvSourceType">
		<xs:complexContent>
			<xs:extension base="SourceType">
				<xs:sequence minOccurs="0" maxOccurs="unbounded">
					<xs:element name="featureproperty">
						<xs:annotation>
							<xs:documentation>Mit dieser Liste von featureproperties wird der
								FeatureType spezifiziert, den der gelesene Workspace
							erhält.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence minOccurs="0" maxOccurs="unbounded">
								<xs:element name="column" type="xs:int">
									<xs:annotation>
										<xs:documentation>Spezifiziert, aus welcher(n) Spalte)n) des
											csv diese FeatureProperty gelesen wird. Es können
											durchaus mehrere Spalten sein, wie z.B. im Falle einer
											Punktgeometrie.</xs:documentation>
									</xs:annotation>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="name" type="xs:string" use="required">
								<xs:annotation>
									<xs:documentation>Name der erzeugten
									FeatureProperty</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="type" type="xs:QName" use="required">
								<xs:annotation>
									<xs:documentation>Typ (QName) der erzeugten Feature-Property.
										Ein entsprechender IMarhsallingTypeHandler muss für diesen
										Typ registriert vorliegen.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="format" type="xs:string" use="optional" default="">
								<xs:annotation>
									<xs:documentation>
										<p>Wird eventuell zu parsen der FeatureProperty benutzt.</p>
										<p>Gibt im Falle einer Punktgeometrie z.B. das
											Koordinatensystem an.</p>
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="ignoreFormatExceptions" type="xs:boolean"
								use="optional" default="false">
								<xs:annotation>
									<xs:documentation>
										<p>Falls true, werden Fehler beim Parsen dieser Spalten
											ignoriert..</p>
									</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
				<xs:attributeGroup ref="xlink:locatorLink"/>
				<xs:attribute name="comment" type="xs:string">
					<xs:annotation>
						<xs:documentation>Kommentarzeichen. Zeilen im csv, die mit diesem String
							beginnen, werden ignoriert.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="delemiter" type="xs:string">
					<xs:annotation>
						<xs:documentation>Spaltentrennzeichen des csv.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="lineskip" type="xs:int" use="optional" default="0">
					<xs:annotation>
						<xs:documentation>Anzahl der Zeilen, die am Anfang der Datei übersprungen
							werden.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="featuremapping" type="FeaturemappingSourceType" substitutionGroup="source">
		<xs:annotation>
			<xs:documentation>Eine Datenquelle, die Daten aus zwei Quellen liest und dann Daten aus
				der ersten in die zweite Quelle überträgt. Letztere ist dann das Ergebnis dieser
				Datenquelle.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="FeaturemappingSourceType">
		<xs:complexContent>
			<xs:extension base="SourceType">
				<xs:sequence>
					<xs:element ref="source" minOccurs="2" maxOccurs="2">
						<xs:annotation>
							<xs:documentation>Die beiden Datenquellen, die gelesen werden. Die
								zweite wird als Ergebnis der Operation (nach den diversen Änderungen
								betrachtet).</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element ref="mapping" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="mapping" type="MappingType">
		<xs:annotation>
			<xs:documentation>
				<pr>Beschreibt, die Daten der einen Datenquelle in die andere Datenquelle
					geschrieben werden.</pr>
				<pr>Prinzipiell werden FeatureProperties einer FeatureListe aus der ersten Quelle in
					enie FeatureList der zweiten Quelle geschrieben.</pr>
				<pr>Die Daten werden Dabei entweder überschrieben oder neu angehängt.</pr>
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="MappingType">
		<xs:sequence>
			<xs:element name="map" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:attribute name="from" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Name der FeatureProperty aus der gelesen
							wird.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="to" type="xs:string" use="required">
						<xs:annotation>
							<xs:documentation>Name der FeatureProperty in die geschrieben
							wird.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="fromPath" type="xs:string">
			<xs:annotation>
				<xs:documentation>Aus diesen Features der ersten Quelle wird gelesen. Muss eine
					FeatureList sein.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="fromID" type="xs:string">
			<xs:annotation>
				<xs:documentation>ID der Quelle (Name der Property) für Zuordnungen zwischen Quelle
					und Ziel.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="toPath" type="xs:string">
			<xs:annotation>
				<xs:documentation>In diese Features der zweiten Quelle wird geschrieben. Muss eine
					FeatureList sein.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="toID" type="xs:string">
			<xs:annotation>
				<xs:documentation>ID des Ziels (Name der Property) für zuordnungen zwiuschen Quelle
					und Ziel.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="addFeaturesMapping" type="AddFeaturesMappingType" substitutionGroup="mapping">
		<xs:annotation>
			<xs:documentation>Fügt für jedes Feature der ersten FeatureList ein neues Element in die
				zweite FeatureList ein. Die Properties werden dann entsprechend der Zuordnung
				gesetzt.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="AddFeaturesMappingType">
		<xs:complexContent>
			<xs:extension base="MappingType">
				<xs:attribute name="handleExisting" type="handleExistingType" use="optional"
					default="overwrite">
					<xs:annotation>
						<xs:documentation>Was passiert, wenn schon ein Feature mit dem gleichen
							Primärschlüssel da ist?</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="fid" type="xs:string" use="optional" default="${fromID}">
					<xs:annotation>
						<xs:documentation>Gibt an, wie die FeatureID (fid) der neuen Featurs
							generiert wird. Als Vairiable werden zur Zeit unterstützt: 'fromID',
							'toID', 'fID', 'count'. Default ist:
						'${fromID}_${count}'</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="changeFeaturesMapping" type="changeFeaturesMappingType"
		substitutionGroup="mapping">
		<xs:annotation>
			<xs:documentation>Ändert lediglich bereits vorhandene Features der zweiten Liste. Für
				jedes Feature der ersten Liste wird einen mit gleicher ID in der zweiten gesucht und
				geändert, falls vorhanden.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="changeFeaturesMappingType">
		<xs:complexContent>
			<xs:extension base="MappingType"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="handleExistingType">
		<xs:annotation>
			<xs:documentation> Enumeration for addFeatureMappingType. If a feature with the target
				property (toID) already exists, do what? change: change existing, that is overwrite
				its properties. overwrite: creates a new feature and sets its properties. The old is
				removed. nothing: odl features stays. </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="change"/>
			<xs:enumeration value="overwrite"/>
			<xs:enumeration value="nothing"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="changesource" type="ChangeSourceType" substitutionGroup="source">
		<xs:annotation>
			<xs:documentation>Eine Datenquelle, die Daten aus einer Quelle liest und diese
				verändert.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="ChangeSourceType">
		<xs:complexContent>
			<xs:extension base="SourceType">
				<xs:sequence>
					<xs:element ref="source" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Die Datenquelle, die gelesen und dann verändert
							wird.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="visitor" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Ändert Featueres anhand eines
							FeatureVisitors.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:sequence>
								<xs:element name="argument" minOccurs="0" maxOccurs="unbounded">
									<xs:annotation>
										<xs:documentation>Argumente für den FeatureVisitor Es wird
											davon ausgegangen, dass der FeatureVisitor einen
											Konsturktor hat, welcher ein Properties-Objekt als
											Parameter bekomment kann..</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:attribute name="name" type="xs:string">
											<xs:annotation>
												<xs:documentation>Key des
												Arguments.</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="value" type="xs:string">
											<xs:annotation>
												<xs:documentation>Wert des
												Arguments.</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:complexType>
								</xs:element>
							</xs:sequence>
							<xs:attribute name="visitorclass" type="xs:string" use="optional">
								<xs:annotation>
									<xs:documentation>Klassennamen des FeatureVisitors, der den Wert
										(Object) der Property erzeugt.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="visitorid" type="xs:string" use="optional">
								<xs:annotation>
									<xs:documentation>Extension-ID eines FeatureVisitor,der den Wert
										(Object) der Property erzeugt.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
							<xs:attribute name="featurePath" type="xs:string">
								<xs:annotation>
									<xs:documentation>Auf diesen Feature-Path wird der Visitor
										angewendet.</xs:documentation>
								</xs:annotation>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
