/*----------------    FILE HEADER KALYPSO ------------------------------------------
 *
 *  This file is part of kalypso.
 *  Copyright (C) 2004 by:
 *
 *  Technical University Hamburg-Harburg (TUHH)
 *  Institute of River and coastal engineering
 *  Denickestraﬂe 22
 *  21073 Hamburg, Germany
 *  http://www.tuhh.de/wb
 *
 *  and
 *
 *  Bjoernsen Consulting Engineers (BCE)
 *  Maria Trost 3
 *  56070 Koblenz, Germany
 *  http://www.bjoernsen.de
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact:
 *
 *  E-Mail:
 *  belger@bjoernsen.de
 *  schlienger@bjoernsen.de
 *  v.doemming@tuhh.de
 *
 *  ---------------------------------------------------------------------------*/
package org.kalypso.ui.rrm.internal.conversion.to12_02;

import java.io.File;
import java.math.BigDecimal;

import javax.xml.namespace.QName;

import org.apache.commons.lang3.StringUtils;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.kalypso.contribs.eclipse.core.runtime.IStatusCollector;
import org.kalypso.contribs.eclipse.core.runtime.StatusCollector;
import org.kalypso.model.hydrology.binding.model.Catchment;
import org.kalypso.model.hydrology.binding.model.NaModell;
import org.kalypso.model.hydrology.cm.binding.ICatchmentModel;
import org.kalypso.model.hydrology.project.INaProjectConstants;
import org.kalypso.model.rcm.binding.ICatchment;
import org.kalypso.model.rcm.binding.IFactorizedTimeseries;
import org.kalypso.model.rcm.binding.ILinearSumGenerator;
import org.kalypso.model.rcm.binding.IRainfallGenerator;
import org.kalypso.ogc.sensor.timeseries.TimeseriesUtils;
import org.kalypso.ui.rrm.internal.KalypsoUIRRMPlugin;
import org.kalypsodeegree.model.feature.IFeatureBindingCollection;

/**
 * Helper that guesses a CatchmentModel for each existing calculation case.
 *
 * @author Gernot Belger
 */
public class CatchmentModelBuilder
{
  private final IStatusCollector m_log = new StatusCollector( KalypsoUIRRMPlugin.getID() );

  private final ICatchmentModel m_catchmentModel;

  private final File m_simulationDir;

  private final NaModell m_naModel;

  public CatchmentModelBuilder( final NaModell naModel, final ICatchmentModel catchmentModel, final File simulationDir )
  {
    m_naModel = naModel;
    m_catchmentModel = catchmentModel;
    m_simulationDir = simulationDir;
  }

  public IStatus execute( final QName modelTimeseriesLink, final String parameterType )
  {
    /* Create and add new generator */
    final IFeatureBindingCollection<IRainfallGenerator> generators = m_catchmentModel.getGenerators();
    final ILinearSumGenerator generator = generators.addNew( ILinearSumGenerator.FEATURE_LINEAR_SUM_GENERATOR, ILinearSumGenerator.class );

    // generator.setName( m_simulationDir.getName() );
    generator.setParameterType( parameterType );
    generator.setDescription( m_simulationDir.getName() );
    generator.setComment( "Generated by project converter" );

    /* Add catchments */
    final IFeatureBindingCollection<Catchment> catchments = m_naModel.getCatchments();
    for( final Catchment catchment : catchments )
    {
      try
      {
        final IStatus status = buildCatchment( generator, catchment, modelTimeseriesLink, parameterType );
        m_log.add( status );
      }
      catch( final CoreException e )
      {
        m_log.add( e.getStatus() );
      }
    }

    final String parameterName = TimeseriesUtils.getName( parameterType );
    final String message = String.format( "Convert catchment model '%s' from existing timeseries references", parameterName );
    return m_log.asMultiStatusOrOK( message, message );
  }

  private IStatus buildCatchment( final ILinearSumGenerator generator, final Catchment modelCatchment, final QName modelTimeseriesLink, final String parameterType ) throws CoreException
  {
    /* Create new catchment */
    final IFeatureBindingCollection<ICatchment> catchments = generator.getCatchments();
    final ICatchment newCatchment = catchments.addNew( ICatchment.FEATURE_CATCHMENT );

    newCatchment.setName( modelCatchment.getName() );
    newCatchment.setDescription( modelCatchment.getDescription() );

    /* link to model's catchment */
    final String href = String.format( "%s#%s", INaProjectConstants.GML_MODELL_FILE, modelCatchment.getId() );
    newCatchment.setAreaLink( href );

    /* Guess timeseries link... */
    final String timeseriesPath = guessTimeseries( modelCatchment, modelTimeseriesLink, parameterType );
    if( StringUtils.isBlank( timeseriesPath ) )
    {
      final String message = String.format( "Failed to guess timeseries for catchment: %s", modelCatchment.getName() );
      return new Status( IStatus.WARNING, KalypsoUIRRMPlugin.getID(), message );
    }

    /* ...and set to catchment */
    final IFeatureBindingCollection<IFactorizedTimeseries> timeseriesList = newCatchment.getFactorizedTimeseries();
    final IFactorizedTimeseries timeseries = timeseriesList.addNew( IFactorizedTimeseries.FEATURE_FACTORIZED_TIMESERIES );
    timeseries.setFactor( new BigDecimal( 100 ) );
    timeseries.setTimeseriesLink( timeseriesPath );

    return Status.OK_STATUS;
  }

  private String guessTimeseries( final Catchment modelCatchment, final QName modelTimeseriesLink, final String parameterType ) throws CoreException
  {

    // TODO Auto-generated method stub
    return null;
  }
}