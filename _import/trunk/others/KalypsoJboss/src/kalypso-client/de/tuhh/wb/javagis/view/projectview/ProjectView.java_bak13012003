package de.tuhh.wb.javagis.view.projectview;

import java.util.Vector;
import java.util.Hashtable;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.JInternalFrame;
import javax.swing.*;
import javax.swing.tree.*;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;


import de.tuhh.wb.javagis.data.VersionAccess;
import de.tuhh.wb.javagis.data.VersionAccessImpl;
import de.tuhh.wb.javagis.view.JobRequest;
import de.tuhh.wb.javagis.data.event.VersionListener;
import de.tuhh.wb.javagis.data.event.KalypsoEventManager;
import ejb.event.EJBEvent;

public class ProjectView extends JInternalFrame implements ActionListener, MouseListener, VersionListener
{
    VersionAccess versionAccess;
    int selectedVersion;
    Hashtable versionHash;
    JSplitPane  jSplitPane       = new JSplitPane();
    JScrollPane jScrollPaneLeft  = new JScrollPane();
    JScrollPane jScrollPaneRight = new JScrollPane();
    
    JTextField jTextFieldHost = new JTextField("localhost");
    JTextField jTextFieldPort = new JTextField("port");
    JTextField jTextFieldUser = new JTextField("user");
    JTextField jTextFieldPass = new JTextField("pass");

    JTextField jTextFieldProject     = new JTextField("Tisza");
    JTextField jTextFieldTheme       = new JTextField("Modell");
    JTextField jTextFieldState       = new JTextField("state");
    JTextField jTextFieldName        = new JTextField("name");
    JTextField jTextFieldDescription = new JTextField("description");
    
    JButton jUpdateButton = new JButton("connect");
    JTree jTree;
    DefaultTreeModel treeModel;
    public ProjectView()
    {
	super("ProjectView",true,true,true,true);
	this.selectedVersion=-1;
	this.versionAccess=null;
	this.versionHash=new Hashtable();
	KalypsoEventManager.getInstance().addVersionListener(this);
	initMask();
    }
    
    public void initMask()
    {
	getContentPane().removeAll();
	treeModel=new DefaultTreeModel(new DefaultMutableTreeNode("not connected to kalypso-server"));
	jTree= new JTree(treeModel);
	
	GridBagLayout layout=new GridBagLayout();
	GridBagConstraints layoutConstraints = new GridBagConstraints();
	layoutConstraints.fill = GridBagConstraints.BOTH;
	layoutConstraints.gridwidth = 1;
	layoutConstraints.gridheight =1;
	layoutConstraints.weightx = 0.5;
 	layoutConstraints.weighty = 0.7;

	JPanel jPanelLeft = new JPanel(layout);
	jSplitPane.add(jScrollPaneLeft,  JSplitPane.LEFT);
	jSplitPane.add(jScrollPaneRight, JSplitPane.RIGHT);
	jScrollPaneLeft.getViewport().add(jPanelLeft, null);
	jScrollPaneRight.getViewport().add(jTree, null);
	jTree.addMouseListener(this);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("host:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldHost);
	
	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("port:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldPort);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("user:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldUser);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("pass:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldPass);

	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jUpdateButton);
	jUpdateButton.setActionCommand("updateProjectTree");
	jUpdateButton.addActionListener(this);

	// new Version:
	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("project:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldProject);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("theme:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldTheme);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("state:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldState);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("versionName:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldName);

	layoutConstraints.gridwidth = 1;
	add2View(jPanelLeft,layout,layoutConstraints,new JLabel("description:"));
	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	add2View(jPanelLeft,layout,layoutConstraints,jTextFieldDescription);

	layoutConstraints.gridwidth = GridBagConstraints.REMAINDER;
	JButton createVersionButton=new JButton("create Version");
	add2View(jPanelLeft,layout,layoutConstraints,createVersionButton);
	createVersionButton.setActionCommand("createVersion");
	createVersionButton.addActionListener(this);
	

	//	jSplitPane.setDividerLocation(0.5d);
	//	jSplitPane.setDividerSize(20);
	jSplitPane.resetToPreferredSizes();
	this.getContentPane().add(jSplitPane, null);
    }

    public void add2View(JPanel panel,GridBagLayout gridbag,GridBagConstraints c,JComponent  component) 
    {
	gridbag.setConstraints(component, c);
	panel.add(component);
    }
    
    private void reloadProjectTree()
    {
	String host=jTextFieldHost.getText();
	String port=jTextFieldPort.getText();
	String user=jTextFieldUser.getText();
	String pass=jTextFieldPass.getText();
	System.out.println("host:"+host);
	System.out.println("port:"+port);
	System.out.println("user:"+user);
	System.out.println("pass:"+pass);

	DefaultMutableTreeNode rootNode= new DefaultMutableTreeNode(host);

	//   {
	versionAccess=(VersionAccess) new VersionAccessImpl(host,port,user,pass);
	
	//   }
	//	else
	//  versionAccess.updateIndex();
	
	//	VersionAccess versionAccess=(VersionAccess) new VersionAccessDummy();//AccessImpl(versionClass);
	Vector themeKeys=versionAccess.getThemeKeys();
	for(int i=0;i<themeKeys.size();i++)
	    System.out.println("ThemeKey form ThemeManager: "+(themeKeys.elementAt(i))+".");
	Hashtable nodes=new Hashtable();
	nodes.put("root",rootNode);
	buildTree(0,nodes,versionAccess);
	treeModel.setRoot(rootNode);
	versionHash.clear();
	for(int row=0;row<versionAccess.getSize();row++)
	    {
		String path=host+getPath(row,3,versionAccess);
		System.out.println("hash: "+path);
		versionHash.put(path,new Integer(row));
	    }
    }
    
    public void buildTree(int deep,Hashtable parentNodes,VersionAccess versionAccess)
    {
	Hashtable nodes=new Hashtable();
	for(int row=0;row<versionAccess.getSize();row++)
	    {
		String path=getPath(row,deep,versionAccess);
		if(!nodes.containsKey(path))
		    {
			String newText=getText(row,deep,versionAccess);
			DefaultMutableTreeNode newNode;
			//	if(newText==null || !"-".equals(newText))
			//			    {
				newNode=new DefaultMutableTreeNode(newText);
				((DefaultMutableTreeNode)parentNodes.get(getPath(row,deep-1,versionAccess))).add(newNode);
				//			    }
				//			else
				//			    newNode=(DefaultMutableTreeNode)parentNodes.get(getPath(row,deep-1,versionAccess));
			nodes.put(path,newNode);
		    }
	    }
	if(deep<3)
	    buildTree(deep+1,nodes,versionAccess);
    }
    
    private String getPath(int row,int deep,VersionAccess versionAccess)
    {
	String path="";
	if(deep<0)
	    return "root";
	for(int i=0;i<=deep;i++)
	    path=path+getText(row,i,versionAccess);
	return path;
    }

    private String getText(int row,int col,VersionAccess versionAccess)
    {
	switch(col)
	    { 
	    case 0:
		return versionAccess.getProjectName(row);
	    case 1:
		return versionAccess.getThemeName(row);
	    case 2:
		return versionAccess.getState(row);
	    case 3:
		return versionAccess.getName(row);
	    default:
		break;
	    }
	return "ERROR";
    }

    //MouseListener
    public void mouseClicked(MouseEvent e) 
    {}
    public  void mouseEntered(MouseEvent e) 
    {}
    public  void mouseExited(MouseEvent e) 
    {}
    public  void mousePressed(MouseEvent e) 
    {
	maybeShowPopup(e);
    }

    public void mouseReleased(MouseEvent e)
    {
	maybeShowPopup(e);
    }

    public void maybeShowPopup(MouseEvent e)
    {
	System.out.println("Mouse Pressed");
	int selRow = jTree.getRowForLocation(e.getX(), e.getY());
	jTree.setSelectionRow(selRow);
	if(selRow!=-1)
	    {
		TreePath selPath = jTree.getPathForLocation(e.getX(), e.getY());
		Object[] objects=selPath.getPath();
		String selectedVersion="";

		
		if(selPath.getPathCount()==5 && e.isPopupTrigger())
		    {
			for(int i=0;i<objects.length;i++)
			    {
				selectedVersion+=objects[i].toString();
			    }
			selectVersion(selectedVersion);			

			System.out.println("selectedVersion:"+selectedVersion);
			JPopupMenu popup = new JPopupMenu();
			JMenuItem menuItem = new JMenuItem("open TableView");
			menuItem.setActionCommand("openTableViewFromSelectedVersion");
			menuItem.addActionListener(this);
			popup.add(menuItem);
			
			menuItem = new JMenuItem("open NetView");
			menuItem.setActionCommand("openNetViewFromSelectedVersion");
			menuItem.addActionListener(this);
			popup.add(menuItem);
			
			menuItem = new JMenuItem("remove Version");
			menuItem.setActionCommand("removeSelectedVersion");
			menuItem.addActionListener(this);
			popup.add(menuItem);

			menuItem = new JMenuItem("run simulation (from SimulationCase)");
			menuItem.setActionCommand("simulate");
			menuItem.addActionListener(this);
			popup.add(menuItem);

			menuItem = new JMenuItem("xml-export");
			menuItem.setActionCommand("xml-export");
			menuItem.addActionListener(this);
			popup.add(menuItem);

			menuItem = new JMenuItem("xml-import");
			menuItem.setActionCommand("xml-import");
			menuItem.addActionListener(this);
			popup.add(menuItem);
			popup.show(e.getComponent(),
				   e.getX(), e.getY());
			
		    }
	    }
    }
    
    private void selectVersion(String version)
    {
	if(versionHash.containsKey(version))
	    {
		selectedVersion=((Integer)versionHash.get(version)).intValue();
		System.out.println("selected Version-Nr: "+selectedVersion);
	    }
	else
	    selectedVersion=-1;
    }    

    // ActionListener
    public void actionPerformed(ActionEvent e)
    {
	if("updateProjectTree".equals(e.getActionCommand()))
	    {
		reloadProjectTree();
	    }
	if("createVersion".equals(e.getActionCommand()))
	    {
		if(versionAccess!=null)
		    {
			versionAccess.createVersion(jTextFieldProject.getText(),
						jTextFieldTheme.getText(),
						jTextFieldState.getText(),
						jTextFieldName.getText(),
						jTextFieldDescription.getText());
		    }
		else
		    System.out.println("please connect to kalypso-server");
	    }
	if("removeSelectedVersion".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		{
		    versionAccess.removeVersion(selectedVersion);
		}
	    }

	if("openTableViewFromSelectedVersion".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		    versionAccess.openTableView(selectedVersion);
	    }
	if("openNetViewFromSelectedVersion".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		    versionAccess.openNetView(selectedVersion);
	    }
	if("xml-import".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		    new JobRequest("Import from XML","importXmlFileSelected",this);
	    }
	if("importXmlFileSelected".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		    {
			Object source=e.getSource();
			String fileName=((JTextField)source).getText();
			versionAccess.xmlImport(selectedVersion,fileName);
		    }
	    }
	if("xml-export".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		    versionAccess.xmlExport(selectedVersion);
	    }
	if("simulate".equals(e.getActionCommand()))
	    {
		if(selectedVersion!=-1)
		    versionAccess.simulate(selectedVersion);
	    }
    }

    //VersionListener:
    public void onVersionChanged(EJBEvent event)
    {
	reloadProjectTree();	
    }
}
