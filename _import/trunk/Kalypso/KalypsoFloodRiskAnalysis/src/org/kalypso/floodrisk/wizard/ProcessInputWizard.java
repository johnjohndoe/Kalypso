/*----------------    FILE HEADER KALYPSO ------------------------------------------
 *
 *  This file is part of kalypso.
 *  Copyright (C) 2004 by:
 * 
 *  Technical University Hamburg-Harburg (TUHH)
 *  Institute of River and coastal engineering
 *  Denickestraﬂe 22
 *  21073 Hamburg, Germany
 *  http://www.tuhh.de/wb
 * 
 *  and
 *  
 *  Bjoernsen Consulting Engineers (BCE)
 *  Maria Trost 3
 *  56070 Koblenz, Germany
 *  http://www.bjoernsen.de
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 * 
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 *  Contact:
 * 
 *  E-Mail:
 *  belger@bjoernsen.de
 *  schlienger@bjoernsen.de
 *  v.doemming@tuhh.de
 *   
 *  ---------------------------------------------------------------------------*/
package org.kalypso.floodrisk.wizard;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.jobs.ISchedulingRule;
import org.eclipse.jface.wizard.Wizard;
import org.kalypso.contribs.eclipse.core.runtime.StatusUtilities;
import org.kalypso.contribs.eclipse.core.runtime.jobs.MutexRule;
import org.kalypso.floodrisk.process.ProcessExtension;
import org.kalypso.floodrisk.process.impl.ProcessJob;
import org.kalypso.jwsdp.JaxbUtilities;
import org.kalypso.model.xml.ObjectFactory;
import org.kalypso.simulation.core.simspec.Modeldata;

/**
 * ProcessInputWizard
 * <p>
 * Wizard for getting the inputdata files (modeldata.xml) created by
 * 
 * @author Nadja Peiler (18.05.2005)
 */
public class ProcessInputWizard extends Wizard
{
  private static final JAXBContext JC = JaxbUtilities.createQuiet( ObjectFactory.class );

  private IProject m_project;

  private ProcessExtension[] m_processes;

  /**
   * Constructor
   * 
   * @param project
   *          selected project
   * @param processes
   *          processes, which need inputdata files
   */
  public ProcessInputWizard( IProject project, ProcessExtension[] processes )
  {
    super();
    m_project = project;
    m_processes = processes;
    setWindowTitle( "Process Input Wizard" );
  }

  /**
   * @see org.eclipse.jface.wizard.IWizard#addPages()
   */
  @Override
  public void addPages( )
  {
    super.addPages();

    for( int i = 0; i < m_processes.length; i++ )
    {
      // only processes with calculationState=true, means which should be
      // calculated, need input
      if( m_processes[i].getState() )
      {
        ProcessInputWizardPage page = new ProcessInputWizardPage( m_processes[i].getName(), m_processes[i].getName(), null );
        page.setProcessExtension( m_processes[i] );
        page.setProject( m_project );
        addPage( page );
      }
    }
  }

  /**
   * @see org.eclipse.jface.wizard.IWizard#performFinish()
   */
  @Override
  public boolean performFinish( )
  {
    try
    {
      // all jobs should run one after another
      final ISchedulingRule rule = new MutexRule();
      for( final ProcessExtension processExtension : m_processes )
      {
        if( processExtension.getState() )
        {
          // read ModelData
          final Modeldata modelData = readModelData( processExtension.getModelDataPath() );
          // check if typeID in modelData equals typeID of process
          if( !processExtension.getId().equals( modelData.getTypeID() ) )
          {
            throw new CoreException( StatusUtilities.createErrorStatus( "TypeId of modelData (" + modelData.getTypeID() + ") does not fit to typeID of process (" + processExtension.getId()
                + ")! Check modelData!" ) );
          }
          // create job
          final ProcessJob processJob = new ProcessJob( modelData, m_project );
          processJob.setRule( rule );
          processJob.schedule();
        }
      }
    }
    catch( Exception e )
    {
      e.printStackTrace();
    }

    return true;
  }

  /**
   * reads the modelData
   * 
   * @param modelDataPath
   * @return ModelDataType java object of the modelData, generated by the unmarshaller
   */
  private Modeldata readModelData( IPath modelDataPath ) throws CoreException
  {
    try
    {
      final IFile file = m_project.getFile( modelDataPath.removeFirstSegments( 1 ) );

      final Unmarshaller unmarshaller = JC.createUnmarshaller();
      return (Modeldata) unmarshaller.unmarshal( file.getContents() );
    }
    catch( final JAXBException e )
    {
      e.printStackTrace();

      throw new CoreException( StatusUtilities.statusFromThrowable( e, "Fehler beim Laden der Modell-Spezifikation" ) );
    }
  }
}