/*
 * File generated by Octopus on 25.06.2007 13:30:41
 */
package org.kalypso.kalypso1d2d.octopus.test.calculationUnit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.kalypso.kalypso1d2d.octopus.test.calculationUnit.utilities.MergeInvariantError;
import org.kalypso.kalypso1d2d.octopus.test.calculationUnit.utilities.MergeInvariantException;

/** Class ...
 */
public class MergeBoundaryLine {
	private Set /*(BoundaryLine)*/ f_calculationUnit = new HashSet( /*CalculationUnit*/);
	private Set /*(BoundaryLine)*/ f_boundaryCondition = new HashSet( /*BoundaryCondition*/);
	static private boolean usesAllInstances = false;
	static private List allInstances = new ArrayList();

	/** Default constructor for BoundaryLine
	 */
	public MergeBoundaryLine() {
		if ( usesAllInstances ) {
			allInstances.add(this);
		}
	}

	/** Implements the setter for feature '+ calculationUnit : Set(CalculationUnit)'
	 * 
	 * @param elements 
	 */
	public void setCalculationUnit(Set elements) {
		if ( this.f_calculationUnit != elements ) {
			Iterator it = this.f_calculationUnit.iterator();
			while ( it.hasNext() ) {
				MergeCalculationUnit x = (MergeCalculationUnit) it.next();
				x.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
			}
			this.f_calculationUnit = elements;
			if ( f_calculationUnit != null ) {
				it = f_calculationUnit.iterator();
				while ( it.hasNext() ) {
					MergeCalculationUnit x = (MergeCalculationUnit) it.next();
					x.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ calculationUnit : Set(CalculationUnit)'
	 * 
	 * @param element 
	 */
	public void addToCalculationUnit(MergeCalculationUnit element) {
		if ( element == null ) {
			return;
		}
		if ( this.f_calculationUnit.contains(element) ) {
			return;
		}
		this.f_calculationUnit.add(element);
		element.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements removal of a single element from feature '+ calculationUnit : Set(CalculationUnit)'
	 * 
	 * @param element 
	 */
	public void removeFromCalculationUnit(MergeCalculationUnit element) {
		if ( element == null ) {
			return;
		}
		this.f_calculationUnit.remove(element);
		element.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements the getter for + calculationUnit : Set(CalculationUnit)
	 */
	public Set getCalculationUnit() {
		if ( f_calculationUnit != null ) {
			return Collections.unmodifiableSet(f_calculationUnit);
		} else {
			return null;
		}
	}
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToCalculationUnit(MergeCalculationUnit element) {
		this.f_calculationUnit.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromCalculationUnit(MergeCalculationUnit element) {
		this.f_calculationUnit.remove(element);
	}
	
	/** Implements the addition of a number of elements to calculationUnit
	 * 
	 * @param newElems 
	 */
	public void addToCalculationUnit(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeCalculationUnit ) {
				this.addToCalculationUnit((MergeCalculationUnit)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from calculationUnit
	 * 
	 * @param oldElems 
	 */
	public void removeFromCalculationUnit(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeCalculationUnit ) {
				this.removeFromCalculationUnit((MergeCalculationUnit)item);
			}
		}
	}
	
	/** Implements the removal of all elements from calculationUnit
	 */
	public void removeAllFromCalculationUnit() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getCalculationUnit()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeCalculationUnit ) {
				this.removeFromCalculationUnit((MergeCalculationUnit)item);
			}
		}
	}
	
	/** Implements the setter for feature '+ boundaryCondition : Set(BoundaryCondition)'
	 * 
	 * @param elements 
	 */
	public void setBoundaryCondition(Set elements) {
		if ( this.f_boundaryCondition != elements ) {
			Iterator it = this.f_boundaryCondition.iterator();
			while ( it.hasNext() ) {
				MergeBoundaryCondition x = (MergeBoundaryCondition) it.next();
				x.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
			}
			this.f_boundaryCondition = elements;
			if ( f_boundaryCondition != null ) {
				it = f_boundaryCondition.iterator();
				while ( it.hasNext() ) {
					MergeBoundaryCondition x = (MergeBoundaryCondition) it.next();
					x.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ boundaryCondition : Set(BoundaryCondition)'
	 * 
	 * @param element 
	 */
	public void addToBoundaryCondition(MergeCalculationUnit calc, MergeBoundaryCondition element) {
		if ( element == null ) {
			return;
		}
		if ( this.f_boundaryCondition.contains(element) ) {
			return;
		}
		this.f_boundaryCondition.add(element);
		element.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements removal of a single element from feature '+ boundaryCondition : Set(BoundaryCondition)'
	 * 
	 * @param element 
	 */
	public void removeFromBoundaryCondition(MergeBoundaryCondition element) {
		if ( element == null ) {
			return;
		}
		this.f_boundaryCondition.remove(element);
		element.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements the getter for + boundaryCondition : Set(BoundaryCondition)
	 */
	public Set getBoundaryCondition() {
		if ( f_boundaryCondition != null ) {
			return Collections.unmodifiableSet(f_boundaryCondition);
		} else {
			return null;
		}
	}
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToBoundaryCondition(MergeBoundaryCondition element) {
		this.f_boundaryCondition.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromBoundaryCondition(MergeBoundaryCondition element) {
		this.f_boundaryCondition.remove(element);
	}
	
	/** Implements the addition of a number of elements to boundaryCondition
	 * 
	 * @param newElems 
	 */
	public void addToBoundaryCondition(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryCondition ) {
				this.addToBoundaryCondition(null, (MergeBoundaryCondition)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from boundaryCondition
	 * 
	 * @param oldElems 
	 */
	public void removeFromBoundaryCondition(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryCondition ) {
				this.removeFromBoundaryCondition((MergeBoundaryCondition)item);
			}
		}
	}
	
	/** Implements the removal of all elements from boundaryCondition
	 */
	public void removeAllFromBoundaryCondition() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getBoundaryCondition()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryCondition ) {
				this.removeFromBoundaryCondition((MergeBoundaryCondition)item);
			}
		}
	}
	
	/** Implements self.boundaryCondition->size() = 1
	 */
	public void invariant_BoundaryLine1() throws MergeInvariantException {
		boolean result = false;
		try {
			result = (this.getBoundaryCondition().size() == 1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if ( ! result ) {
			String message = "invariant self.boundaryCondition->size() = 1 ";
			message = message + "is broken in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "'";
			throw new MergeInvariantException(this, message);
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		try {
			invariant_BoundaryLine1();
		} catch (MergeInvariantException e) {
			result.add(new MergeInvariantError(e.getInstance(), e.getMessage()));
		}
		return result;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		if ( getCalculationUnit().size() < 1 ) {
			String message = "Lower bound of feature 'calculationUnit' in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "' is 1" +
			  			", yet it has size " + getCalculationUnit().size() + ".";
			result.add(new MergeInvariantError(this, message));
		}
		if ( getBoundaryCondition().size() < 1 ) {
			String message = "Lower bound of feature 'boundaryCondition' in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "' is 1" +
			  			", yet it has size " + getBoundaryCondition().size() + ".";
			result.add(new MergeInvariantError(this, message));
		}
		return result;
	}
	
	/** Returns the default identifier for BoundaryLine
	 */
	public String getIdString() {
		String result = "";
		result = "no ID found";
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

}