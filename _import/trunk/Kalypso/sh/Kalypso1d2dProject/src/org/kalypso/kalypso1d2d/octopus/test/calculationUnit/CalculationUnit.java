/*
 * File generated by Octopus on 22.06.2007 18:18:23
 */
package org.kalypso.kalypso1d2d.octopus.test.calculationUnit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.kalypso.kalypso1d2d.octopus.test.calculationUnit.utilities.InvariantError;
import org.kalypso.kalypso1d2d.octopus.test.calculationUnit.utilities.InvariantException;


/** Class ...
 */
public class CalculationUnit {
	private Set /*(BoundaryCondition)*/ f_boundaryLine = new HashSet( /*BoundaryLine*/);
	static private boolean usesAllInstances = false;
	static private List allInstances = new ArrayList();

	/** Default constructor for CalculationUnit
	 */
	public CalculationUnit() {
		if ( usesAllInstances ) {
			allInstances.add(this);
		}
	}

	/** Implements the getter for feature '+ boundaryLine : Set(BoundaryLine)'
	 */
	public Set getBoundaryLine() {
		return f_boundaryLine;
	}
	
	/** Implements the setter for feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void setBoundaryLine(Set element) {
		if ( f_boundaryLine != element ) {
			f_boundaryLine = element;
		}
	}
	
	/** Implements the add element function for feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void addToBoundaryLine(BoundaryLine element) {
		if ( f_boundaryLine.contains(element) ) {
			return;
		}
		f_boundaryLine.add(element);
	}
	
	/** Implements the remove element function for feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void removeFromBoundaryLine(BoundaryLine element) {
		f_boundaryLine.remove(element);
	}
	
	/** Implements the addition of a number of elements to feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param newElems 
	 */
	public void addToBoundaryLine(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof BoundaryLine ) {
				addToBoundaryLine((BoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param oldElems 
	 */
	public void removeFromBoundaryLine(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof BoundaryLine ) {
				removeFromBoundaryLine((BoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of all elements from feature '+ boundaryLine : Set(BoundaryLine)'
	 */
	public void removeAllFromBoundaryLine() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getBoundaryLine()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof BoundaryLine ) {
				removeFromBoundaryLine((BoundaryLine)item);
			}
		}
	}
	
	/** Implements self.boundaryLine->size() >= 2
	 */
	public void invariant_CalculationUnit1() throws InvariantException {
		boolean result = false;
		try {
			result = (this.getBoundaryLine().size() >= 2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if ( ! result ) {
			String message = "invariant self.boundaryLine->size() >= 2 ";
			message = message + "is broken in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "'";
			throw new InvariantException(this, message);
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		try {
			invariant_CalculationUnit1();
		} catch (InvariantException e) {
			result.add(new InvariantError(e.getInstance(), e.getMessage()));
		}
		return result;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		return result;
	}
	
	/** Returns the default identifier for CalculationUnit
	 */
	public String getIdString() {
		String result = "";
		result = "no ID found";
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

}