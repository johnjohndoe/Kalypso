/*
 * File generated by Octopus on 25.06.2007 13:30:41
 */
package org.kalypso.kalypso1d2d.octopus.test.calculationUnit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.kalypso.kalypso1d2d.octopus.test.calculationUnit.utilities.MergeInvariantError;

/** Class ...
 */
public class MergeBoundaryCondition {
	private Set /*(BoundaryLine)*/ f_boundaryLine = new HashSet( /*BoundaryLine*/);
	static private boolean usesAllInstances = false;
	static private List allInstances = new ArrayList();

	/** Default constructor for BoundaryCondition
	 */
	public MergeBoundaryCondition() {
		if ( usesAllInstances ) {
			allInstances.add(this);
		}
	}

	/** Implements the setter for feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param elements 
	 */
	public void setBoundaryLine(Set elements) {
		if ( this.f_boundaryLine != elements ) {
			Iterator it = this.f_boundaryLine.iterator();
			while ( it.hasNext() ) {
				MergeBoundaryLine x = (MergeBoundaryLine) it.next();
				x.z_internalRemoveFromBoundaryCondition( (MergeBoundaryCondition)this );
			}
			this.f_boundaryLine = elements;
			if ( f_boundaryLine != null ) {
				it = f_boundaryLine.iterator();
				while ( it.hasNext() ) {
					MergeBoundaryLine x = (MergeBoundaryLine) it.next();
					x.z_internalAddToBoundaryCondition( (MergeBoundaryCondition)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void addToBoundaryLine(MergeBoundaryLine element) {
		if ( element == null ) {
			return;
		}
		if ( this.f_boundaryLine.contains(element) ) {
			return;
		}
		this.f_boundaryLine.add(element);
		element.z_internalAddToBoundaryCondition( (MergeBoundaryCondition)this );
	}
	
	/** Implements removal of a single element from feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void removeFromBoundaryLine(MergeBoundaryLine element) {
		if ( element == null ) {
			return;
		}
		this.f_boundaryLine.remove(element);
		element.z_internalRemoveFromBoundaryCondition( (MergeBoundaryCondition)this );
	}
	
	/** Implements the getter for + boundaryLine : Set(BoundaryLine)
	 */
	public Set getBoundaryLine() {
		if ( f_boundaryLine != null ) {
			return Collections.unmodifiableSet(f_boundaryLine);
		} else {
			return null;
		}
	}
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToBoundaryLine(MergeBoundaryLine element) {
		this.f_boundaryLine.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromBoundaryLine(MergeBoundaryLine element) {
		this.f_boundaryLine.remove(element);
	}
	
	/** Implements the addition of a number of elements to boundaryLine
	 * 
	 * @param newElems 
	 */
	public void addToBoundaryLine(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.addToBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from boundaryLine
	 * 
	 * @param oldElems 
	 */
	public void removeFromBoundaryLine(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.removeFromBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of all elements from boundaryLine
	 */
	public void removeAllFromBoundaryLine() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getBoundaryLine()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.removeFromBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		return result;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		if ( getBoundaryLine().size() < 1 ) {
			String message = "Lower bound of feature 'boundaryLine' in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "' is 1" +
			  			", yet it has size " + getBoundaryLine().size() + ".";
			result.add(new MergeInvariantError(this, message));
		}
		return result;
	}
	
	/** Returns the default identifier for BoundaryCondition
	 */
	public String getIdString() {
		String result = "";
		result = "no ID found";
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

}