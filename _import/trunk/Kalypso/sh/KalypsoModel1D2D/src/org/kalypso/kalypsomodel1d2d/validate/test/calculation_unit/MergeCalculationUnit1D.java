/*
 * File generated by Octopus on 25.06.2007 13:30:41
 */
package org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/** Class ...
 */
public class MergeCalculationUnit1D extends MergeCalculationUnit {
	private Set /*(BoundaryLine)*/ f_element1D = new HashSet( /*Element1D*/);
	static private boolean usesAllInstances = false;
	static private List allInstances = new ArrayList();

	/** Default constructor for CalculationUnit1D
	 */
	public MergeCalculationUnit1D() {
	  super(null);
		if ( usesAllInstances ) {
			allInstances.add(this);
		}
	}

	/** Implements the getter for feature '+ element1D : Set(Element1D)'
	 */
	public Set getElement1D() {
		return f_element1D;
	}
	
	/** Implements the setter for feature '+ element1D : Set(Element1D)'
	 * 
	 * @param element 
	 */
	public void setElement1D(Set element) {
		if ( f_element1D != element ) {
			f_element1D = element;
		}
	}
	
	/** Implements the add element function for feature '+ element1D : Set(Element1D)'
	 * 
	 * @param element 
	 */
	public void addToElement1D(MergeElement1D element) {
		if ( f_element1D.contains(element) ) {
			return;
		}
		f_element1D.add(element);
	}
	
	/** Implements the remove element function for feature '+ element1D : Set(Element1D)'
	 * 
	 * @param element 
	 */
	public void removeFromElement1D(MergeElement1D element) {
		f_element1D.remove(element);
	}
	
	/** Implements the addition of a number of elements to feature '+ element1D : Set(Element1D)'
	 * 
	 * @param newElems 
	 */
	public void addToElement1D(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeElement1D ) {
				addToElement1D((MergeElement1D)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from feature '+ element1D : Set(Element1D)'
	 * 
	 * @param oldElems 
	 */
	public void removeFromElement1D(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeElement1D ) {
				removeFromElement1D((MergeElement1D)item);
			}
		}
	}
	
	/** Implements the removal of all elements from feature '+ element1D : Set(Element1D)'
	 */
	public void removeAllFromElement1D() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getElement1D()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeElement1D ) {
				removeFromElement1D((MergeElement1D)item);
			}
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		return result;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		return result;
	}
	
	/** Returns the default identifier for CalculationUnit1D
	 */
	public String getIdString() {
		String result = "";
		result = super.getIdString();
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

}