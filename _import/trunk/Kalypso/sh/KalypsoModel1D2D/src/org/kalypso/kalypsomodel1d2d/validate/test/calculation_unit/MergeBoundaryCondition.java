/*
 * File generated by Octopus on 25.06.2007 13:30:41
 */
package org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.kalypso.kalypsomodel1d2d.schema.binding.discr.IBoundaryLine;
import org.kalypso.kalypsomodel1d2d.schema.binding.discr.ICalculationUnit;
import org.kalypso.kalypsomodel1d2d.schema.binding.flowrel.BoundaryCondition;
import org.kalypso.kalypsomodel1d2d.ui.calculationUnitView.IProblem;
import org.kalypso.kalypsomodel1d2d.ui.calculationUnitView.invariants.ICalculationValidateInterface;
import org.kalypso.kalypsomodel1d2d.ui.map.calculation_unit.CalculationUnitDataModel;
import org.kalypso.kalypsomodel1d2d.ui.map.facedata.ICommonKeys;
import org.kalypso.kalypsomodel1d2d.validate.calculation_unit.utilities.MergeInvariantError;
import org.kalypso.kalypsosimulationmodel.core.modeling.IDiscretisationModel;
import org.kalypso.ogc.gml.mapmodel.CommandableWorkspace;
import org.kalypsodeegree.model.feature.Feature;

/** Class ...
 */
@SuppressWarnings("unchecked")
public class MergeBoundaryCondition extends BoundaryCondition implements ICalculationValidateInterface{
  
  private List<IBoundaryLine> boundaryLines = new ArrayList<IBoundaryLine>();
  private CalculationUnitDataModel dataModel;
  static private boolean usesAllInstances = false;
  static private List allInstances = new ArrayList();

  public MergeBoundaryCondition(CalculationUnitDataModel dataModel, Feature featureToBind )
  {
    super( featureToBind );
    if ( usesAllInstances ) {
		allInstances.add(this);
	}
    this.dataModel = dataModel;
  }

	/** Implements the setter for feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param elements 
	 */
	public void setBoundaryLine(List<IBoundaryLine> elements) {
		if ( this.boundaryLines != elements ) {
			Iterator it = this.boundaryLines.iterator();
			while ( it.hasNext() ) {
				MergeBoundaryLine x = (MergeBoundaryLine) it.next();
				x.z_internalRemoveFromBoundaryCondition( (MergeBoundaryCondition)this );
			}
			this.boundaryLines = elements;
			if ( boundaryLines != null ) {
				it = boundaryLines.iterator();
				while ( it.hasNext() ) {
					MergeBoundaryLine x = (MergeBoundaryLine) it.next();
					x.z_internalAddToBoundaryCondition( (MergeBoundaryCondition)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void addToBoundaryLine(MergeBoundaryLine element) {
		if ( element == null ) {
			return;
		}
		if ( this.boundaryLines.contains(element) ) {
			return;
		}
		this.boundaryLines.add(element);
		element.z_internalAddToBoundaryCondition( (MergeBoundaryCondition)this );
	}
	
	/** Implements removal of a single element from feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void removeFromBoundaryLine(MergeBoundaryLine element) {
		if ( element == null ) {
			return;
		}
		this.boundaryLines.remove(element);
		element.z_internalRemoveFromBoundaryCondition( (MergeBoundaryCondition)this );
	}
	
	/** Implements the getter for + boundaryLine : Set(BoundaryLine)
	 */
	public List<IBoundaryLine> getBoundaryLine() {
		if ( boundaryLines != null ) {
			return boundaryLines;
		} else {
			return null;
		}
	}
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToBoundaryLine(MergeBoundaryLine element) {
		this.boundaryLines.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromBoundaryLine(MergeBoundaryLine element) {
		this.boundaryLines.remove(element);
	}
	
	/** Implements the addition of a number of elements to boundaryLine
	 * 
	 * @param newElems 
	 */
	public void addToBoundaryLine(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.addToBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from boundaryLine
	 * 
	 * @param oldElems 
	 */
	public void removeFromBoundaryLine(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.removeFromBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of all elements from boundaryLine
	 */
	public void removeAllFromBoundaryLine() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getBoundaryLine()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.removeFromBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		if (result!= null)
		  return result;
		else
		  return null;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		if ( getBoundaryLine().size() < 1 ) {
			String message = "Lower bound of feature 'boundaryLine' in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "' is 1" +
			  			", yet it has size " + getBoundaryLine().size() + ".";
			result.add(new MergeInvariantError(this, message));
		}
		return result;
	}
	
	/** Returns the default identifier for BoundaryCondition
	 */
	public String getIdString() {
		String result = "";
		result = "no ID found";
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getBoundaryLines()
   */
  @SuppressWarnings("unchecked")
  public List<IBoundaryLine> getBoundaryLines( )
  {
    return (List<IBoundaryLine>) getBoundaryLine();
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getCalculationUnit()
   */

  
  public IDiscretisationModel getDiscretisationModel()
  {
    
    CommandableWorkspace workspace = 
      dataModel.getData( 
          CommandableWorkspace.class, 
          ICommonKeys.KEY_BOUNDARY_CONDITION_CMD_WORKSPACE );
    
    final Feature opModelFeature = workspace.getRootFeature();
    IDiscretisationModel disModel = 
      (IDiscretisationModel) opModelFeature.getAdapter( IDiscretisationModel.class );  
    return disModel;    
  }
  
  private List<ICalculationUnit> getMainCalculationUnit(){
    
    
    return (List<ICalculationUnit>) dataModel.getData( ICommonKeys.KEY_FEATURE_WRAPPER_LIST );    
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getBrokenInvariantMessages()
   */
  public List<IProblem> getBrokenInvariantMessages( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getCalculationUnit()
   */
  public ICalculationUnit getCalculationUnit( )
  {
    // TODO Auto-generated method stub
    return null;
  }

}