/*
 * File generated by Octopus on 25.06.2007 13:30:41
 */
package org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.kalypso.kalypsomodel1d2d.schema.binding.discr.IBoundaryLine;
import org.kalypso.kalypsomodel1d2d.schema.binding.discr.ICalculationUnit;
import org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DElement;
import org.kalypso.kalypsomodel1d2d.validate.calculation_unit.utilities.MergeInvariantError;
import org.kalypso.kalypsomodel1d2d.validate.calculation_unit.utilities.MergeInvariantException;
import org.kalypso.kalypsosimulationmodel.core.IFeatureWrapperCollection;
import org.kalypsodeegree.model.feature.Feature;

/** Class ...
 */
@SuppressWarnings("unchecked")
public class MergeCalculationUnit implements ICalculationUnit,ICalculationValidateInterface
{
  private List<IBoundaryLine> boundaryLines = new ArrayList<IBoundaryLine>();
  static private boolean usesAllInstances = false;
  static private List allInstances = new ArrayList();
//
//  public MergeCalculationUnit( Feature featureToBind, QName qnameToBind, QName elementListPropQName, Class wrapperClass )
//  {
//    super( featureToBind, qnameToBind, elementListPropQName, wrapperClass );
//		if ( usesAllInstances ) {
//			allInstances.add(this);
//	}
//  }
  
public MergeCalculationUnit()
{
    if ( usesAllInstances ) {
        allInstances.add(this);
}
}

	/** Implements the setter for feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param elements 
	 */
	public void setBoundaryLine(List<IBoundaryLine> elements) {
		if ( this.boundaryLines != elements ) {
			Iterator it = this.boundaryLines.iterator();
			while ( it.hasNext() ) {
				MergeBoundaryLine x = (MergeBoundaryLine) it.next();
				x.z_internalRemoveFromCalculationUnit( (MergeCalculationUnit)this );
			}
			this.boundaryLines = elements;
			if ( boundaryLines != null ) {
				it = boundaryLines.iterator();
				while ( it.hasNext() ) {
					MergeBoundaryLine x = (MergeBoundaryLine) it.next();
					x.z_internalAddToCalculationUnit( (MergeCalculationUnit)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void addToBoundaryLine(MergeBoundaryLine element) {
		if ( element == null ) {
			return;
		}
		if ( this.boundaryLines.contains(element) ) {
			return;
		}
		this.boundaryLines.add(element);
		element.z_internalAddToCalculationUnit( (MergeCalculationUnit)this );
	}
	
	/** Implements removal of a single element from feature '+ boundaryLine : Set(BoundaryLine)'
	 * 
	 * @param element 
	 */
	public void removeFromBoundaryLine(MergeBoundaryLine element) {
		if ( element == null ) {
			return;
		}
		this.boundaryLines.remove(element);
		element.z_internalRemoveFromCalculationUnit( (MergeCalculationUnit)this );
	}
	
	/** Implements the getter for + boundaryLine : Set(BoundaryLine)
	 */
	public List<IBoundaryLine> getBoundaryLine() {
		if ( boundaryLines != null ) {
			return (boundaryLines);
		} else {
			return null;
		}
	}
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToBoundaryLine(MergeBoundaryLine element) {
		this.boundaryLines.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromBoundaryLine(MergeBoundaryLine element) {
		this.boundaryLines.remove(element);
	}
	
	/** Implements the addition of a number of elements to boundaryLine
	 * 
	 * @param newElems 
	 */
	public void addToBoundaryLine(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.addToBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from boundaryLine
	 * 
	 * @param oldElems 
	 */
	public void removeFromBoundaryLine(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.removeFromBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements the removal of all elements from boundaryLine
	 */
	public void removeAllFromBoundaryLine() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getBoundaryLine()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryLine ) {
				this.removeFromBoundaryLine((MergeBoundaryLine)item);
			}
		}
	}
	
	/** Implements self.boundaryLine->size() >= 2
	 */
	public void invariant_CalculationUnit1() throws MergeInvariantException {
		boolean result = false;
		try {
			result = (this.getBoundaryLine().size() >= 2);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if ( ! result ) {
			String message = "invariant self.boundaryLine->size() >= 2 ";
			message = message + "is broken in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "'";
			throw new MergeInvariantException(this, message);
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		try {
			invariant_CalculationUnit1();
		} catch (MergeInvariantException e) {
			result.add(new MergeInvariantError(e.getInstance(), e.getMessage()));
		}
		return result;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		return result;
	}
	
	/** Returns the default identifier for CalculationUnit
	 */
	public String getIdString() {
		String result = "";
		result = "no ID found";
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getBoundaryLines()
   */
  public List<IBoundaryLine> getBoundaryLines( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getCalculationUnit()
   */
  public List<ICalculationUnit> getCalculationUnit( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DComplexElement#addElementAsRef(org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DElement)
   */
  public boolean addElementAsRef( IFE1D2DElement element )
  {
    // TODO Auto-generated method stub
    return false;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DComplexElement#getElements()
   */
  public IFeatureWrapperCollection getElements( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DComplexElement#removeElementAsRef(org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DElement)
   */
  public boolean removeElementAsRef( IFE1D2DElement elment )
  {
    // TODO Auto-generated method stub
    return false;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getDescription()
   */
  public String getDescription( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getGmlID()
   */
  public String getGmlID( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getName()
   */
  public String getName( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getWrappedFeature()
   */
  public Feature getWrappedFeature( )
  {
    // TODO Auto-generated method stub
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#setDescription(java.lang.String)
   */
  public void setDescription( String desc )
  {
    // TODO Auto-generated method stub
    
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#setName(java.lang.String)
   */
  public void setName( String name )
  {
    // TODO Auto-generated method stub
    
  }

}