/*
 * File generated by Octopus on 25.06.2007 13:30:41
 */
package org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import org.kalypso.kalypsomodel1d2d.schema.binding.discr.BoundaryLine;
import org.kalypso.kalypsomodel1d2d.schema.binding.discr.IBoundaryLine;
import org.kalypso.kalypsomodel1d2d.schema.binding.discr.ICalculationUnit;
import org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DEdge;
import org.kalypso.kalypsomodel1d2d.schema.binding.flowrel.IBoundaryCondition;
import org.kalypso.kalypsomodel1d2d.ui.calculationUnitView.invariants.ICalculationValidateInterface;
import org.kalypso.kalypsomodel1d2d.ui.map.calculation_unit.CalculationUnitDataModel;
import org.kalypso.kalypsomodel1d2d.validate.calculation_unit.utilities.MergeInvariantError;
import org.kalypso.kalypsomodel1d2d.validate.calculation_unit.utilities.MergeInvariantException;
import org.kalypso.kalypsosimulationmodel.core.IFeatureWrapperCollection;
import org.kalypsodeegree.model.feature.Feature;
import org.kalypsodeegree.model.geometry.GM_Exception;
import org.kalypsodeegree.model.geometry.GM_Object;

/** Class ...
 */
@SuppressWarnings("unchecked")
public class MergeBoundaryLine implements IBoundaryLine,ICalculationValidateInterface
{
  private List<ICalculationUnit> calculationUnits = new ArrayList<ICalculationUnit>();
  private List<IBoundaryCondition> boundaryConditions = new ArrayList<IBoundaryCondition>();
  private CalculationUnitDataModel dataModel;
  static private boolean usesAllInstances = false;
  static private List allInstances = new ArrayList();

  public MergeBoundaryLine()
  { 
    if ( usesAllInstances ) {
      allInstances.add(this);
    }
   
  }

	/** Implements the setter for feature '+ calculationUnit : Set(CalculationUnit)'
	 * 
	 * @param elements 
	 */
	public void setCalculationUnit(List<ICalculationUnit> elements) {
		if ( this.calculationUnits != elements ) {
			Iterator it = this.calculationUnits.iterator();
			while ( it.hasNext() ) {
				MergeCalculationUnit x = (MergeCalculationUnit) it.next();
				x.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
			}
			this.calculationUnits = elements;
			if ( calculationUnits != null ) {
				it = calculationUnits.iterator();
				while ( it.hasNext() ) {
					MergeCalculationUnit x = (MergeCalculationUnit) it.next();
					x.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ calculationUnit : Set(CalculationUnit)'
	 * 
	 * @param element 
	 */
	public void addToCalculationUnit(MergeCalculationUnit element) {
		if ( element == null ) {
			return;
		}
		if ( this.calculationUnits.contains(element) ) {
			return;
		}
		this.calculationUnits.add(element);
		element.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements removal of a single element from feature '+ calculationUnit : Set(CalculationUnit)'
	 * 
	 * @param element 
	 */
	public void removeFromCalculationUnit(MergeCalculationUnit element) {
		if ( element == null ) {
			return;
		}
		this.calculationUnits.remove(element);
		element.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements the getter for + calculationUnit : Set(CalculationUnit)
	 */
	public List<ICalculationUnit> getCalculationUnit() {
		if ( calculationUnits != null ) {
			return calculationUnits;
		} else {
			return null;
		}

	}
	
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToCalculationUnit(ICalculationUnit element) {
		this.calculationUnits.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromCalculationUnit(MergeCalculationUnit element) {
		this.calculationUnits.remove(element);
	}
	
	/** Implements the addition of a number of elements to calculationUnit
	 * 
	 * @param newElems 
	 */
	public void addToCalculationUnit(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeCalculationUnit ) {
				this.addToCalculationUnit((MergeCalculationUnit)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from calculationUnit
	 * 
	 * @param oldElems 
	 */
	public void removeFromCalculationUnit(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeCalculationUnit ) {
				this.removeFromCalculationUnit((MergeCalculationUnit)item);
			}
		}
	}
	
	/** Implements the removal of all elements from calculationUnit
	 */
	public void removeAllFromCalculationUnit() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getCalculationUnit()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeCalculationUnit ) {
				this.removeFromCalculationUnit((MergeCalculationUnit)item);
			}
		}
	}
	
	/** Implements the setter for feature '+ boundaryCondition : Set(BoundaryCondition)'
	 * 
	 * @param elements 
	 */
	public void setBoundaryCondition(List<IBoundaryCondition> elements) {
		if ( this.boundaryConditions != elements ) {
			Iterator it = this.boundaryConditions.iterator();
			while ( it.hasNext() ) {
				MergeBoundaryCondition x = (MergeBoundaryCondition) it.next();
				x.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
			}
			this.boundaryConditions = elements;
			if ( boundaryConditions != null ) {
				it = boundaryConditions.iterator();
				while ( it.hasNext() ) {
					MergeBoundaryCondition x = (MergeBoundaryCondition) it.next();
					x.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
				}
			}
		}
	}
	
	/** Implements addition of a single element to feature '+ boundaryCondition : Set(BoundaryCondition)'
	 * 
	 * @param element 
	 */
	public void addToBoundaryCondition(MergeCalculationUnit calc, MergeBoundaryCondition element) {
		if ( element == null ) {
			return;
		}
		if ( this.boundaryConditions.contains(element) ) {
			return;
		}
		this.boundaryConditions.add(element);
		element.z_internalAddToBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements removal of a single element from feature '+ boundaryCondition : Set(BoundaryCondition)'
	 * 
	 * @param element 
	 */
	public void removeFromBoundaryCondition(MergeBoundaryCondition element) {
		if ( element == null ) {
			return;
		}
		this.boundaryConditions.remove(element);
		element.z_internalRemoveFromBoundaryLine( (MergeBoundaryLine)this );
	}
	
	/** Implements the getter for + boundaryCondition : Set(BoundaryCondition)
	 */
	public List<IBoundaryCondition> getBoundaryCondition() {
		if ( boundaryConditions != null ) {
			return boundaryConditions;
		} else {
			return null;
		}
	}
	
	/** This operation should NOT be used by clients. It implements the correct addition of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalAddToBoundaryCondition(MergeBoundaryCondition element) {
		this.boundaryConditions.add(element);
	}
	
	/** This operation should NOT be used by clients. It implements the correct removal of an element in an association.
	 * 
	 * @param element 
	 */
	public void z_internalRemoveFromBoundaryCondition(MergeBoundaryCondition element) {
		this.boundaryConditions.remove(element);
	}
	
	/** Implements the addition of a number of elements to boundaryCondition
	 * 
	 * @param newElems 
	 */
	public void addToBoundaryCondition(Collection newElems) {
		Iterator it = newElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryCondition ) {
				this.addToBoundaryCondition(null, (MergeBoundaryCondition)item);
			}
		}
	}
	
	/** Implements the removal of a number of elements from boundaryCondition
	 * 
	 * @param oldElems 
	 */
	public void removeFromBoundaryCondition(Collection oldElems) {
		Iterator it = oldElems.iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryCondition ) {
				this.removeFromBoundaryCondition((MergeBoundaryCondition)item);
			}
		}
	}
	
	/** Implements the removal of all elements from boundaryCondition
	 */
	public void removeAllFromBoundaryCondition() {
		/* make a copy of the collection in order to avoid a ConcurrentModificationException*/
		Iterator it = new HashSet(getBoundaryCondition()).iterator();
		while ( (it.hasNext()) ) {
			Object item = it.next();
			if ( item instanceof MergeBoundaryCondition ) {
				this.removeFromBoundaryCondition((MergeBoundaryCondition)item);
			}
		}
	}
	
	/** Implements self.boundaryCondition->size() = 1
	 */
	public void invariant_BoundaryLine1() throws MergeInvariantException {
		boolean result = false;
		try {
			result = (this.getBoundaryCondition().size() == 1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if ( ! result ) {
			String message = "invariant self.boundaryCondition->size() = 1 ";
			message = message + "is broken in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "'";
			throw new MergeInvariantException(this, message);
		}
	}
	
	/** Checks all invariants of this object and returns a list of messages about broken invariants
	 */
	public List checkAllInvariants() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		try {
			invariant_BoundaryLine1();
		} catch (MergeInvariantException e) {
			result.add(new MergeInvariantError(e.getInstance(), e.getMessage()));
		}
		return result;
	}
	
	/** Implements a check on the multiplicities of all attributes and association ends
	 */
	public List checkMultiplicities() {
		List /* InvariantError */ result = new ArrayList /* InvariantError */();
		if ( getCalculationUnit().size() < 1 ) {
			String message = "Lower bound of feature 'calculationUnit' in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "' is 1" +
			  			", yet it has size " + getCalculationUnit().size() + ".";
			result.add(new MergeInvariantError(this, message));
		}
		if ( getBoundaryCondition().size() < 1 ) {
			String message = "Lower bound of feature 'boundaryCondition' in object '";
			message = message + this.getIdString();
			message = message + "' of type '" + this.getClass().getName() + "' is 1" +
			  			", yet it has size " + getBoundaryCondition().size() + ".";
			result.add(new MergeInvariantError(this, message));
		}
		return result;
	}
	
	/** Returns the default identifier for BoundaryLine
	 */
	public String getIdString() {
		String result = "";
		result = "no ID found";
		return result;
	}
	
	/** Implements the OCL allInstances operation
	 */
	static public List allInstances() {
		if ( !usesAllInstances ) {
			throw new RuntimeException("allInstances is not implemented for this class. Set usesAllInstances to true, if you want allInstances() implemented.");
		}
		return allInstances;
	}

  /**
   * @see org.kalypso.kalypsomodel1d2d.validate.test.calculation_unit.ICalculationValidateInterface#getBoundaryLines()
   */
  public List<IBoundaryLine> getBoundaryLines( )
  {
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.ILineElement#addEdge(java.lang.String)
   */
  public void addEdge( String edgeID )
  {
    
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.ILineElement#getEdges()
   */
  public IFeatureWrapperCollection getEdges( )
  {
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.ILineElement#setEdges(ET[])
   */
  public void setEdges( IFE1D2DEdge[] edges )
  {
    
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DElement#getContainers()
   */
  public IFeatureWrapperCollection getContainers( )
  {
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DElement#getNodes()
   */
  public List getNodes( )
  {
    return null;
  }

  /**
   * @see org.kalypso.kalypsomodel1d2d.schema.binding.discr.IFE1D2DElement#recalculateElementGeometry()
   */
  public GM_Object recalculateElementGeometry( ) throws GM_Exception
  {
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getDescription()
   */
  public String getDescription( )
  {
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getGmlID()
   */
  public String getGmlID( )
  {
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getName()
   */
  public String getName( )
  {
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#getWrappedFeature()
   */
  public Feature getWrappedFeature( )
  {
    return null;
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#setDescription(java.lang.String)
   */
  public void setDescription( String desc )
  {
    
  }

  /**
   * @see org.kalypsodeegree.model.feature.binding.IFeatureWrapper2#setName(java.lang.String)
   */
  public void setName( String name )
  {
    
  }

}