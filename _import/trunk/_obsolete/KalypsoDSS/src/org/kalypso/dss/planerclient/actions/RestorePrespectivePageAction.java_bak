package org.kalypso.dss.planerclient.actions;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.net.MalformedURLException;
import java.net.URL;

import org.eclipse.core.resources.IProject;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.ui.IMemento;
import org.eclipse.ui.IPerspectiveDescriptor;
import org.eclipse.ui.IViewPart;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.WorkbenchException;
import org.eclipse.ui.XMLMemento;
import org.eclipse.ui.ide.ResourceUtil;
import org.eclipse.ui.internal.IWorkbenchConstants;
import org.eclipse.ui.internal.Workbench;
import org.eclipse.ui.internal.WorkbenchPage;
import org.eclipse.ui.internal.registry.PerspectiveDescriptor;
import org.eclipse.ui.internal.registry.PerspectiveRegistry;
import org.kalypso.commons.java.net.UrlResolver;
import org.kalypso.commons.java.net.UrlResolverSingleton;
import org.kalypso.contribs.eclipse.core.resources.ResourceUtilities;
import org.kalypso.contribs.eclipse.ui.MementoUtils;
import org.kalypso.contribs.eclipse.ui.MementoWithUrlResolver;
import org.kalypso.contribs.java.net.ContextMappingURLStreamHandler;
import org.kalypso.contribs.java.net.IUrlResolver2;
import org.kalypso.dss.KalypsoDSSPlugin;
import org.kalypso.dss.planerclient.browser.KalypsoWebBrowserView;

/**
 * Diese Action wird nur einmal ausgeführt und steht als Platzhalter für die z.B. aus dem Intro-screen aufgerufener
 * Einstiegsklick.
 */
public class RestorePrespectivePageAction extends Action implements IWorkbenchWindowActionDelegate
{

  private IWorkbenchWindow m_window;

  public void dispose( )
  {
    // TODO Auto-generated method stub

  }

  public void init( IWorkbenchWindow window )
  {
    m_window = window;

  }

  public void run( IAction action )
  {

    FileDialog dialog = new FileDialog( m_window.getShell(), SWT.OPEN );
    dialog.setFilterExtensions( SavePrespectivePageAction.FILTER_EXTENSION );
    dialog.setText( "Restore State from file.." );
    String dialogResult = dialog.open();
    if( dialogResult == null )
      return;
    // do the business
    final Workbench workbench = (Workbench) PlatformUI.getWorkbench();
    final WorkbenchPage activePage = (WorkbenchPage) workbench.getActiveWorkbenchWindow().getActivePage();

    final PerspectiveRegistry registry = (PerspectiveRegistry) workbench.getPerspectiveRegistry();
    try
    {

      final File sourceFile = new File( dialogResult );
      final XMLMemento originalMemento = XMLMemento.createReadRoot( new FileReader( sourceFile ) );

      final IMemento memento = MementoUtils.createMementoWithUrlResolver( originalMemento, null,new IUrlResolver2()
      {

        public URL resolveURL( String relative ) throws MalformedURLException
        {
          return UrlResolverSingleton.resolveUrl( sourceFile.toURL(), relative );
        }
      } );
      IMemento windowMemento = memento.getChild( IWorkbenchConstants.TAG_WINDOW );
      IMemento pageMemento = windowMemento.getChild( IWorkbenchConstants.TAG_PAGE );
      IMemento perspspectiveMemento = pageMemento.getChild( IWorkbenchConstants.TAG_PERSPECTIVES );
      IMemento singlePerspective = perspspectiveMemento.getChild( IWorkbenchConstants.TAG_PERSPECTIVE );
      IMemento descMemento = singlePerspective.getChild( IWorkbenchConstants.TAG_DESCRIPTOR );
      String perspectiveID = descMemento.getString( IWorkbenchConstants.TAG_ID );

      PerspectiveDescriptor realDesc = (PerspectiveDescriptor) registry.findPerspectiveWithId( perspectiveID );
      IPerspectiveDescriptor perspectiveDesc = activePage.getPerspective();
      activePage.closePerspective( perspectiveDesc, false, false );
      // activePage.closeAllPerspectives(false, false);

      // activePage.closeAllPerspectives(false, true);

      // registry.saveCustomPersp(realDesc, (XMLMemento)
      // singlePerspective);
      // IAdaptable input = ((Workbench) workbench).getDefaultPageInput();
      // WorkbenchPage page = (WorkbenchPage) workbench
      // .getActiveWorkbenchWindow().openPage(realDesc.getId(),
      // input);
      // Wieso diese Reihenfolge?? aber funktioniert

      activePage.restoreState( pageMemento, realDesc );
      activePage.setPerspective( realDesc );
      activePage.resetPerspective();

      // page.restoreState(pageMemento, realDesc);
      // page.setPerspective(realDesc);
      // page.resetPerspective();

      // IViewPart part = activePage.findView( KalypsoWebBrowserView.WEB_BROWSER_VIEW_ID );
      // if( part instanceof KalypsoWebBrowserView )
      // {
      // ((KalypsoWebBrowserView) part).setURL( KalypsoDSSPlugin.START_URL );
      // }

    }
    catch( WorkbenchException e )
    {
      e.printStackTrace();
    }
    catch( FileNotFoundException e )
    {
      e.printStackTrace();
    }

  }

  public void selectionChanged( IAction action, ISelection selection )
  {
    // TODO Auto-generated method stub

  }
}
