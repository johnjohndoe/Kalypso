<project default="fake">

    <property name="modell.template.dir" value="${project.dir}/.templates/Modell" />

    <!-- - - - - - - - - - - - - - - - - - 
          target: fake                      nur damit das Projekt nicht schreit
      - - - - - - - - - - - - - - - - - -->
    <target name="fake" />

    <target name="info">
        <echo message="" />
        <echo message=" project dir ${project.dir}" />
        <echo message=" project url ${project.url}" />
        <echo message=" calc dir    ${calc.dir}" />
        <echo message=" calc url    ${calc.url}" />
        <echo message="" />
    </target>

    <!-- 
		 ================================= 
          target: create			Rechenvariante erzeugen
         ================================= 
    -->
    <target name="create" description="Erzeugt eine Rechenvariante">
        <echo message="Rechenvariante anlegen: ${calc.dir}" />
        <!-- copy modell -->
        <copy file="${project.dir}/modell.gml" tofile="${calc.dir}/calcCase.gml" />
        <copy file="${project.dir}/ombrometer.gml" tofile="${calc.dir}/ombrometer.gml" />
        <copy file="${project.dir}/rcm.gml" tofile="${calc.dir}/rcm.gml" />
        <copy file="${project.dir}/.model/observationConf/ObsTMapping.gml"
              tofile="${calc.dir}/.obsT.gml" />
		<copy file="${project.dir}/.templates/.calculation.template" tofile="${calc.dir}/.calculation"/>

        <!-- copy others -->
        <copy todir="${calc.dir}">
            <fileset dir="${project.dir}/.templates/calcCase/copy"
                     includes="*/**"
                     excludes="**/CVS/**" />
        </copy>
    	
		<kalypso.changeGml gmlURL="${calc.url}/.calculation">
			<property featurepath="" featureProperty="scenarioId" value="${kalypso.currentScenarioId}"/>
			<property featurepath="" featureProperty="startsimulation" value="${kalypso.startsim}"/>
			<property featurepath="" featureProperty="startforecast" value="${kalypso.startforecast}"/>
			<property featurepath="" featureProperty="hoursforecast" value="78"/>
			<property featurepath="" featureProperty="minutesTimestep" value="60"/>
			<property featurepath="" featureProperty="versionKalypsoNA" value="lfug"/>
			<property featurepath="" featureProperty="editor" value="${kalypso.currentUser}"/>
			<property featurepath="" featureProperty="description" value="- bitte ausfüllen -"/>
			<property featurepath="" featureProperty="comment" value="- bitte ausfüllen -"/>
			<property featurepath="" featureProperty="calctime" value="${kalypso.currentTime}"/>
			<property featurepath="" featureProperty="mergeCasePath" value="${calc.merge.relpath}"/>
		</kalypso.changeGml>
    </target>

    <target name="setProperties" depends="info">
        <echo message="Variablen einrichten" />
        <kalypso.gmlProperty gmlURL="${calc.url}/.calculation">
            <property name="scenarioId"
                      featurepath=""
                      featureProperty="scenarioId"
                      defaultValue="" />
            <property name="startsim" featurepath="/" featureProperty="startsimulation" />
            <property name="startforecast" featurepath="/" featureProperty="startforecast" />
            <property name="hoursofforecast" featurepath="/" featureProperty="hoursforecast" />
            <property name="interval.amount" featurepath="/" featureProperty="minutesTimestep" />
            <property name="calc.merge.path" featurepath="/" featureProperty="mergeCasePath" defaultValue="" />
        </kalypso.gmlProperty>

    	<!-- Construct the url of the calc case to merge and set the flag if merge is allowed.
    		 REMARK: add trailing '/', else url resolution does not work properly for
    		 the merge task
    	-->
    	<property name="calc.merge.url" value="${project.url}${calc.merge.path}/"/>
    	<condition property="doMergeCase">
    		<not>
    			<equals trim="true" arg1="" arg2="${calc.merge.path}"/>
    		</not>
    	</condition>
    	
        <!-- Definition der Quellen, der DWD-Raster (Vorhersage) -->
        <!-- Scenario TEST -->
        <property name="szenario_TestDwdUrl1"
                  value="http://lfug-kv-01:8080/webdav/dwd/lm_test.txt" />
        <property name="szenario_TestDwdUrl2"
                  value="http://lfug-kv-02:8080/webdav/dwd/lm_test.txt" />
        <!-- Scenario Echt -->
        <property name="szenario_EchtDwdUrl1" value="http://lfug-kv-01:8080/webdav/dwd/lm_normal.txt" />
        <property name="szenario_EchtDwdUrl2" value="http://lfug-kv-02:8080/webdav/dwd/lm_normal.txt" />

        <property name="dwdRasterLocalPath" value="${calc.dir}/dwd/lm_aktuell.txt" />
        <property name="dwdRasterLocalURL" value="${calc.url}/dwd/lm_aktuell.txt" />


        <!-- Unterscheide zwischen Katastrophentest und normalem Szenario -->
        <kalypso.multiequals arg1="${scenarioId}" arg2="test">
            <!-- Links fürs Abholen der Vorhersage-Zeitreihen -->
            <property name="linkInOmbrometer" valueThen="NRepository1" valueElse="NRepository" />
            <property name="linkInObservation"
                      valueThen="in1ObservationLink"
                      valueElse="inObservationLink" />
            <property name="dwdRasterRemoteURLs"
                      valueThen="${szenario_TestDwdUrl1},${szenario_TestDwdUrl2}"
                      valueElse="${szenario_EchtDwdUrl1},${szenario_EchtDwdUrl2}" />
        </kalypso.multiequals>

        <!-- links fuer pegelmapping -->
        <kalypso.multiequals arg1="${scenarioId}" arg2="test">
            <property name="pegelRemoteMessungLink" valueThen="remote6" valueElse="remote1" />
            <property name="pegelRemoteSpurMLink" valueThen="remote7" valueElse="remote2" />
            <property name="pegelRemoteSpurULink" valueThen="remote8" valueElse="remote3" />
            <property name="pegelRemoteSpurOLink" valueThen="remote9" valueElse="remote4" />
        </kalypso.multiequals>
        <property name="pegelLocalMessungLink" value="local1" />
        <property name="pegelLocalBerechnungLink" value="local2" />
        <property name="pegelLocalSpurMLink" value="local3" />
        <property name="pegelLocalSpurULink" value="local4" />
        <property name="pegelLocalSpurOLink" value="local5" />
        <property name="pegelMappingURL"
                   value="${project.url}/.model/observationConf/PegelMapping.gml" />
        <property name="pegelMappingPrognoseQURL"
                   value="${project.url}/.model/observationConf/PegelVorhersageQMapping.gml" />
        <property name="pegelMappingPrognoseWURL"
                   value="${project.url}/.model/observationConf/PegelVorhersageWMapping.gml" />

        <kalypso.gmlProperty gmlURL="${calc.url}/.calculation">
            <property name="stopsim"
                      featurepath="/"
                      featureProperty="startforecast"
                      dateoffset="${hoursofforecast}"
                      dateoffsetfield="HOUR_OF_DAY" />
        </kalypso.gmlProperty>


        <property name="interval.field" value="MINUTE" />

        <echo message="interval.field:  ${interval.field}" />
        <echo message="interval.amount: ${interval.amount}" />

        <!-- define the requests -->
        <property name="requestN"
                  value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,N&lt;/axes&gt;&lt;statusAxes&gt;N&lt;/statusAxes&gt;&lt;/request&gt;" />
        <property name="requestQ"
                  value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,Q&lt;/axes&gt;&lt;statusAxes&gt;Q&lt;/statusAxes&gt;&lt;/request&gt;" />
        <property name="requestW"
                  value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,W&lt;/axes&gt;&lt;statusAxes&gt;W&lt;/statusAxes&gt;&lt;/request&gt;" />
        <property name="requestT"
                  value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,T&lt;/axes&gt;&lt;statusAxes&gt;T&lt;/statusAxes&gt;&lt;/request&gt;" />

        <!-- define the filters -->
        <!-- N: sum-filter -->
        <property name="filterN"
                  value="${requestN}&lt;filter&gt;&lt;intervallFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; mode=&quot;sum&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />
        <!-- Q/W: interpolation-filter -->
        <property name="filterW"
                  value="${requestW}&lt;filter&gt;&lt;interpolationFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; defaultStatus=&quot;2&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;true&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />
        <property name="filterQ"
                  value="${requestQ}&lt;filter&gt;&lt;interpolationFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; defaultStatus=&quot;2&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;true&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />
    	
        <!-- T: intensity/average-filter -->
        <!-- Temperatur wird als Tageswert benötigt,
             der hydrologische Tag geht von 7 Uhr bis 7 Uhr, denn
			 manuelle Pegel werden um 7 Uhr morgens abgelesen -->
        <property name="intervalT.amount" value="1" />
        <property name="intervalT.field" value="HOUR_OF_DAY" />
        <!--
        <property name="intervalT.start.value" value="7" /> 
        <property name="intervalT.start.field" value="HOUR_OF_DAY" />
		-->
        <property name="filterT"
                  value="${requestT}&lt;filter&gt;&lt;intervallFilter amount=&quot;${intervalT.amount}&quot; calendarField=&quot;${intervalT.field}&quot; mode=&quot;intensity&quot;  defaultStatus=&quot;2&quot; defaultValue=&quot;5.0&quot;  xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />
        <property name="filterCommitPrognoseQ"
                  value="&lt;filter&gt;&lt;interpolationFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; defaultStatus=&quot;2&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;true&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />

    	<property name="filterCommitPrognoseWDown" 
    		value="&lt;filter&gt;&lt;interpolationFilter amount=&quot;3&quot; calendarField=&quot;HOUR_OF_DAY&quot; defaultStatus=&quot;4&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;false&quot; xmlns=&quot;filters.zml.kalypso.org&quot;&gt;&lt;roundFilter factor=&quot;5&quot; mode=&quot;ROUND_DOWN&quot; axisType=&quot;W&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/interpolationFilter&gt;&lt;/filter&gt;"/>
    	<property name="filterCommitPrognoseWUp" 
    		value="&lt;filter&gt;&lt;interpolationFilter amount=&quot;3&quot; calendarField=&quot;HOUR_OF_DAY&quot; defaultStatus=&quot;4&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;false&quot; xmlns=&quot;filters.zml.kalypso.org&quot;&gt;&lt;roundFilter factor=&quot;5&quot; mode=&quot;ROUND_UP&quot; axisType=&quot;W&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/interpolationFilter&gt;&lt;/filter&gt;"/>
    	
        <echo message=" # " />
        <echo message=" # - Parameter-Informationen -" />
        <echo message=" # " />
        <echo message=" # Szenario: '${scenarioId}'" />
        <echo message=" # " />
        <echo message=" # Link zum Abholden von Obrometern    : ${linkInOmbrometer}" />
        <echo message=" # Link zum Abholden anderer Zeitreihen: ${linkInObservation}" />
        <echo message=" # Quelle der verwendeten DWD-Raster-Vorhersagen: ${dwdRasterRemoteURLs}" />
        <echo message=" # " />
        <echo message=" # Zeiträume: " />
        <echo message=" # von                  : ${startsim}" />
        <echo message=" # vorhersage ab        : ${startforecast}" />
        <echo message=" # Zeitraum Vorhersage  : ${hoursofforecast} Stunden" />
        <echo message=" # bis                  : ${stopsim}" />
        <echo message=" # Berechnungsintervall : ${interval.amount} Minuten" />
        <echo message=" # " />
        <echo message=" # Filter Niederschlag : ${filterN}" />
        <echo message=" # " />
        <echo message=" # Filter Temperatur   : ${filterT}" />
        <echo message=" # " />
        <echo message=" # Filter Pegel        : ${filterW}" />
        <echo message=" # " />
        <echo message=" # Filter Zufluss      : ${filterQ}" />
        <echo message=" # " />
        <echo message=" # Filter Vorhersage   : ${filterCommitPrognoseWDown}" />
        <echo message=" # " />
    </target>

    <target name="updateOmbrometer" depends="setProperties">
        <!-- updateOmbrometer(I,U):
						ombrometer von PSI-abholen						
	     -->
        <echo message="aktualisiere Ombrometer Zeitreihen im Rechenfall" />
        <kalypso.copyObservation gml="${calc.url}/ombrometer.gml"
                                 featurePath="ombrometerMember"
                                 context="${calc.url}"
                                 targetObservation="N"
                                 forecastFrom="${startforecast}"
                                 forecastTo="${stopsim}" description="Abruf Ombrometer">
            <source property="${linkInOmbrometer}"
                    from="${startsim}"
                    to="${startforecast}"
                    filter="${filterN}" />
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.copyObservation>
    </target>

    <target name="updateMeasuredN" depends="setProperties">
        <!-- updateMeassured(I,U):
						gebietsniederschlagsmodell in berechnet.zml einfügen
		 -->
        <echo message="aktualisiere Gebietsniederschläge (Messung)" />

    	<kalypso.gmlWeight 
    				modelurl="${calc.url}/rcm.gml" 
    				featurepathtarget="catchmentCollectionMember/catchmentMember" 
    				propzmltarget="rainfall" 
    				proprelationweightmember="rainfallWeightMember" 
    				propweight="weight" 
    				proprelationsourcefeature="ombrometerAssociation" 
    				propzmlsource="timeserie" 
    				targetcontext="${calc.url}" 
    				sourceFrom="${startsim}" 
    				sourceTo="${startforecast}" 
    				targetFrom="${startforecast}" 
    				targetTo="${stopsim}" 
    				forecastfrom="${startforecast}" 
    				forecastto="${stopsim}" 
		    		description="Anwenden Gebietsniederschlagsmodell Vergangenheit"
    	/>
    </target>

    <target name="fetchRaster" depends="setProperties">
        <!-- fetchRaster(I,U):	DWD-Raster-Vorhersage (Datei) in Rechenfall kopieren
		 -->
        <echo message="aktualisiere DWD-Raster im Rechenfall" />
        <Kalypso.fetchFromURL context="${calc.url}"
                              src="${dwdRasterRemoteURLs}"
                              listseparator=","
                              dest="${dwdRasterLocalPath}" />
    </target>

    <target name="updateForecastN" depends="setProperties">
        <!-- updateForecast(I,U):		
					  	Raster auslesen und in berechnet.zml einfügen
		 -->
        <echo message="aktualisiere Gebietsniederschläge (Vorhersage aus DWD-Raster ${dwdRasterLocalURL} )" />
        <kalypso.dwdTask dwd2zmlconfurl="${project.url}/.model/dwd/dwdZmlConfN.xml"
                         obsrasterurl="${dwdRasterLocalURL}"
                         targetcontext="${calc.dir}"
                         description="Anwendung Gebietsniederschlagsmodell Vorhersage"
                         from="${startsim}"
                         forecastfrom="${startforecast}"
                         to="${stopsim}"
                         zmlfilter="${filterN}">
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.dwdTask>
    </target>

    <target name="updateZuflussMessung" depends="setProperties">
        <echo message="aktualisiere Zufluesse (Messung)" />
        <kalypso.copyObservation gml="${project.url}/.model/observationConf/ZuflussMessungMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
                                 targetObservation="outObservationLink"
                                 forecastFrom="${startforecast}"
                                 forecastTo="${stopsim}"
        						 description="Abruf Zuflüsse">
            <source property="${linkInObservation}"
                    from="${startsim}"
                    to="${stopsim}"
                    filter="${filterQ}" />
            <!-- Vorhersage übernehmen -->
        	<!--
            <source property="outObservationLink" from="${startforecast}" to="${stopsim}" />
            -->
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.copyObservation>
    </target>

    <target name="updateZuflussVorhersage" depends="setProperties">
<!--    	
        <echo message="aktualisiere Zufluesse (Vorhersage)" />
        <kalypso.copyObservation gml="${project.url}/.model/observationConf/ZuflussVorhersageMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
                                 targetObservation="outObservationLink"
                                 forecastFrom="${startforecast}"
                                 forecastTo="${stopsim}">
            <source property="outObservationLink" from="${startsim}" to="${startforecast}" />
            <source property="${linkInObservation}"
                    from="${startforecast}"
                    to="${stopsim}"
                    filter="${filterQ}" />
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.copyObservation>
-->    	
    </target>

    <target name="updatePegelMessung" depends="setProperties">
        <echo message="aktualisiere Pegel (Messung)" />

        <kalypso.copyObservation gml="${pegelMappingURL}"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
                                 targetObservation="${pegelLocalMessungLink}"
                                 forecastFrom="${startforecast}"
                                 forecastTo="${stopsim}"
        						 description="Abruf Pegel">
            <source property="${pegelRemoteMessungLink}"
                    from="${startsim}"
                    to="${startforecast}"
                    filter="${filterQ}" />
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.copyObservation>
    </target>

    <target name="updateObsT" depends="setProperties">
        <echo message="aktualisiere Temperaturen (Messung)" />
        <kalypso.copyObservation gml="${project.url}/.model/observationConf/ObsTMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
                                 targetObservation="outObservationLink"
                                 forecastFrom="${startforecast}"
                                 forecastTo="${stopsim}"
        						 description="Abruf Temperatur">
            <source property="${linkInObservation}"
                    from="${startsim}"
                    to="${startforecast}"
                    filter="${filterT}" />
            <!-- Vorhersage übernehmen -->
            <source property="outObservationLink" from="${startforecast}" to="${stopsim}" />
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.copyObservation>
    </target>

    <target name="updateObsGebT" depends="setProperties">
        <echo message="rechne Temperaturen (Messung) auf gebiete um" />
        <kalypso.copyObservation gml="${project.url}/.model/observationConf/ObsTGebMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
                                 targetObservation="outObservationLink"
                                 forecastFrom="${startforecast}"
                                 forecastTo="${stopsim}"
        						 description="Anwendung Gebietstemperaturmodell Vergangenheit">
            <source property="inObservationLink" from="${startsim}" to="${startforecast}" />
            <!-- Vorhersage übernehmen -->
            <source property="outObservationLink" from="${startforecast}" to="${stopsim}" />
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.copyObservation>
    </target>

    <target name="updateForecastT" depends="setProperties">
        <!-- updateForecast(I,U):		
    					  	Raster auslesen und in berechnet.zml einfügen
    		 -->
        <echo message="aktualisiere Gebietstemperaturen (Vorhersage aus DWD-Raster ${dwdRasterLocalURL} )" />
        <kalypso.dwdTask dwd2zmlconfurl="${project.url}/.model/dwd/dwdZmlConfT.xml"
                         obsrasterurl="${dwdRasterLocalURL}"
                         targetcontext="${calc.dir}"
						 description="Anwendung Gebietstemperaturmodell Vergangenheit"
                         from="${startsim}"
                         forecastfrom="${startforecast}"
                         to="${stopsim}"
                         zmlfilter="${filterT}">
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.dwdTask>
    </target>

    <!--  
    	Ergebnisablage:
    	im Projekt ist das Ergebnis der Simulation gespeichert für die Pegel
    	
    	Anttask "KalypsoZmlEnvelope"
    	ZML-result:  Ergebnis der Simulation
    	ZML-measure: PegelMessung
    	dateBegin:   
    	dateEnd:
    	dateCorrespond: Wert
    	Möglichkeit:
		Der Berechnungsdienst liefert schon die Umhüllende mit!
		in nacontrol.gml wird ein dy/dx-Parameter für die umhüllende festgelegt.
		
    -->

    <target name="updateAll"
            depends="fetchRaster,updateForecastN,updateOmbrometer,updateMeasuredN,updateZuflussMessung,updateZuflussVorhersage,updatePegelMessung,updateObsT,updateForecastT,updateObsGebT"
            description="Aktualisiert eine Rechenvariante">
        <echo message="aktualisiere alle Zeitreihen: ${calc.dir}" />
    </target>

    <target name="updateForecastNComplete"
            depends="fetchRaster,updateForecastN"
            description="Aktualisiert Vorhersage N von aktuellen DWD-Rasterdaten">
    </target>

    <target name="update" depends="updateAll" description="Aktualisiert eine Rechenvariante">
        <echo message="aktualisiere Zeitreihen: ${calc.dir}" />

		<antcall target="mergeCase"/>    	
    </target>
    
	<!-- 
		 ================================= 
          target: mergeCase			
         ================================= 
    -->
	<target name="mergeCase" if="doMergeCase" depends="setProperties">
        <!-- Niederschläge - Messung -->
        <kalypso.mergeObservation gml="${calc.url}/ombrometer.gml"
                                 featurePath="ombrometerMember"
                                 context="${calc.url}"
        						 sourcecontext="${calc.merge.url}"
        						 observationproperty="N"/>

        <!-- Niederschläge - Gebiete -->
        <kalypso.mergeObservation gml="${calc.url}/rcm.gml"
                                 featurePath="catchmentCollectionMember/catchmentMember"
        						 depth="zero"
                                 context="${calc.url}"
        						 sourcecontext="${calc.merge.url}"
        						 observationproperty="rainfall"/>

        <!-- Zuflüsse -->
        <kalypso.mergeObservation gml="${project.url}/.model/observationConf/ZuflussMessungMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
        						 sourcecontext="${calc.merge.url}"
        						 observationproperty="outObservationLink"/>

        <!-- Pegel -->
        <kalypso.mergeObservation gml="${pegelMappingURL}"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
        						 sourcecontext="${calc.merge.url}"
        						 observationproperty="${pegelLocalMessungLink}"/>

        <!-- Temperatur Messung -->
		<!-- TODO: momentan auskommentiert, funktioniert nicht, da die Temperatur-Zeitreihen
				keinen Status haben. Vermutlich fällt Temperatur bei
				Einführung des Snow3 Modells eh weg.
        <kalypso.mergeObservation gml="${project.url}/.model/observationConf/ObsTMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
        						 sourcecontext="${calc.merge.url}"
        						 observationproperty="outObservationLink"/>
		-->
		
        <!-- Temperatur - Gebiete -->
		<!-- TODO: momentan auskommentiert, funktioniert nicht, da die Temperatur-Zeitreihen
				keinen Status haben. Vermutlich fällt Temperatur bei
				Einführung des Snow3 Modells eh weg.
        <kalypso.mergeObservation gml="${project.url}/.model/observationConf/ObsTGebMapping.gml"
                                 featurePath="mappingMember"
                                 context="${calc.url}"
        						 sourcecontext="${calc.merge.url}"
        						 observationproperty="outObservationLink"/>
		-->
		
	</target>

	
    <target name="exportVorhersagen" depends="setProperties" description="Exportiert die Prognosen nach PSICompact">
        <echo message="Vorhersagezeitreihen werden nach PSICompact geschrieben..."/>
 		<echo message="Szenario der Rechenvariante ist: ${scenarioId}" />

     	<!-- Einmal normal und je einmal für die untere und die obere Umhüllende -->
    	
    	<!-- Die normale Umhüllende soll nicht mehr abgelegt werden
     	<kalypso.commitPrognoses context="${calc.url}" featurepath="${exportPrognosenFeaturePath}" gml="${pegelMappingURL}" localobs="${pegelLocalSpurMLink}" remoteobs="${pegelRemoteSpurMLink}" runasync="false"/>
     	-->

     	<kalypso.commitPrognoses context="${calc.url}" sourcefilter="${filterCommitPrognoseQ}" featurepath="${exportPrognosenFeaturePath}" gml="${pegelMappingPrognoseQURL}" localobs="${pegelLocalSpurULink}" remoteobs="${pegelRemoteSpurULink}" runasync="false" IgnoreIllegalFeaturePath="true"/>
     	<kalypso.commitPrognoses context="${calc.url}" sourcefilter="${filterCommitPrognoseQ}" featurepath="${exportPrognosenFeaturePath}" gml="${pegelMappingPrognoseQURL}" localobs="${pegelLocalSpurOLink}" remoteobs="${pegelRemoteSpurOLink}" runasync="false" IgnoreIllegalFeaturePath="true"/>
    	
     	<kalypso.commitPrognoses context="${calc.url}" sourcefilter="${filterCommitPrognoseWDown}" featurepath="${exportPrognosenFeaturePath}" gml="${pegelMappingPrognoseWURL}" localobs="${pegelLocalSpurULink}" remoteobs="${pegelRemoteSpurULink}" runasync="false" IgnoreIllegalFeaturePath="true"/>
     	<kalypso.commitPrognoses context="${calc.url}" sourcefilter="${filterCommitPrognoseWUp}" featurepath="${exportPrognosenFeaturePath}" gml="${pegelMappingPrognoseWURL}" localobs="${pegelLocalSpurOLink}" remoteobs="${pegelRemoteSpurOLink}" runasync="false" IgnoreIllegalFeaturePath="true"/>
    	
     </target>
</project>