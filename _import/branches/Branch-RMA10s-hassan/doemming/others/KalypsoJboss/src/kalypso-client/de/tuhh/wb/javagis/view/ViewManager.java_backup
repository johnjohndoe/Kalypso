package de.tuhh.wb.javagis.view;

import java.awt.FlowLayout;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import java.util.Vector;
import javax.swing.JToolBar;
import javax.swing.JButton;

import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.event.MouseEvent;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Color;

import javax.swing.JComboBox;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.BorderLayout;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.JCheckBox;
import javax.swing.JToolBar;
import javax.swing.JButton;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.InternalFrameEvent;

import java.util.Vector;
import java.lang.Math;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import de.tuhh.wb.javagis.data.VersionClass;
import de.tuhh.wb.javagis.Main;

import de.tuhh.wb.javagis.data.Version;
import de.tuhh.wb.javagis.view.tableview.GisTableView;
import de.tuhh.wb.javagis.view.netview.GisNetView;
import de.tuhh.wb.javagis.view.projectview.ProjectView;

public class ViewManager extends JFrame implements WindowListener,ActionListener, ListSelectionListener, MouseListener,MouseMotionListener
{
    public static JDesktopPane desktop;
    //  public Version version;

    //ToolBars:
    JToolBar toolBar;
    
    // Buttons
    JButton zoomInButton;
    JButton infoButton;    
    JButton panButton;    
    JButton importDataButton;
    JButton exportDataButton;
    JButton clearDataButton;
    JButton selectButton;
   
    //    KalypsoInterface kalypsoInterface;
    //Mode
  
    public ViewManager()
    {
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	getContentPane().setLayout(new BorderLayout());
	
	desktop=new JDesktopPane();
	desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
	getContentPane().add(desktop,BorderLayout.CENTER);
	
	setSize(800,500);
	setTitle("Kalypso-Rainfall-Runoff-Model");
	setVisible(true);
	
	ProjectView projectView=new ProjectView();
	projectView.setVisible(true);
	projectView.setSize(400,300);
	desktop.add(projectView);
	projectView.moveToFront();

	Main.connectBCE();
	//	this.kalypsoInterface=new KalypsoInterface(desktop);
	//	JFrame frame=new JFrame("test");
	//	frame.getContentPane().add( kalypsoInterface.getProjectTreePanel() );
	//	frame.setVisible(true);
	//      kalypsoInterface.connectDataBase("localhost","port","user","pass");
	//	kalypsoInterface.createNewVersion("project","Modell","testing","V1","test...");
  
	//  System.out.println("testingg");
	this.addWindowListener(this);
    }
    
    public ViewManager(JDesktopPane desktopPane)
    {
	this.desktop=desktopPane;
    }


    public void showObjectTableView(Version version)
    {
	// 	GisTableView gisTableView = new GisTableView("TestVersion",version.getGisTableModels(),null,0,null,GisTableView.IS_GISELEMENTLIST);
 	GisTableView gisTableView = new GisTableView("TableView: "+version.getLabel(),version.getGisObjectTableModels());
	gisTableView.setVisible(true);
	gisTableView.setSize(670,300);
	desktop.add(gisTableView);
	gisTableView.moveToFront();
    }

    public void showRelationTableView(Version version)
    {
	// 	GisTableView gisTableView = new GisTableView("TestVersion",version.getGisTableModels(),null,0,null,GisTableView.IS_GISELEMENTLIST);
 	GisTableView gisTableView = new GisTableView("TableView: "+version.getLabel(),version.getGisRelationTableModels());
	gisTableView.setVisible(true);
	gisTableView.setSize(670,300);
	desktop.add(gisTableView);
	gisTableView.moveToFront();
    }

    public void showNetView(Version version)
    {
	GisNetView gisNetView = new GisNetView(version.getGisNetModel());
	gisNetView.setVisible(true);
	gisNetView.setSize(400,300);
	desktop.add(gisNetView);
	gisNetView.moveToFront();
	gisNetView.repaint();

    }

    public void showProjectView()
    {
	ProjectView projectView = new ProjectView();
	projectView.setVisible(true);
	projectView.setSize(400,300);
	desktop.add(projectView);		    
    }

    private void makeToolBars()
    {
	toolBar=new JToolBar();
	
	infoButton=new JButton("Info");
	infoButton.addActionListener(this);
	infoButton.setToolTipText("prints object-info to console");
	infoButton.setVisible(true);
	toolBar.add(infoButton);

	zoomInButton=new JButton("Zoom");
	zoomInButton.addActionListener(this);
	zoomInButton.setToolTipText("Zoom in or out");
	zoomInButton.setVisible(true);
	toolBar.add(zoomInButton);
	
	panButton=new JButton("Pan");
	panButton.addActionListener(this);
	panButton.setToolTipText("Pan Map");
	panButton.setVisible(true);
	toolBar.add(panButton);

	selectButton=new JButton("Select");
	selectButton.addActionListener(this);
	selectButton.setToolTipText("Select");
	selectButton.setVisible(true);
	toolBar.add(selectButton);

	toolBar.addSeparator();

	importDataButton=new JButton("Import");
	importDataButton.addActionListener(this);
	importDataButton.setToolTipText("import data from XML-File");
	importDataButton.setVisible(true);
	toolBar.add(importDataButton);

	exportDataButton=new JButton("Export");
	exportDataButton.addActionListener(this);
	exportDataButton.setToolTipText("export data to XML-File");
	exportDataButton.setVisible(true);
	toolBar.add(exportDataButton);

	clearDataButton=new JButton("Clear");
	clearDataButton.addActionListener(this);
	clearDataButton.setToolTipText("clear all Objects");
	clearDataButton.setVisible(true);
	toolBar.add(clearDataButton);

	toolBar.addSeparator();
	toolBar.setSize(200,50);
	toolBar.setVisible(true);
	getContentPane().add(toolBar,BorderLayout.NORTH);
    }

    private void selectionBar(Vector objectClassNames)
    {
	JToolBar selectionBar=new JToolBar("SelectionBar");
	selectionBar.setLayout(new GridLayout (objectClassNames.size(),1));
	for(int i=0;i<objectClassNames.size();i++)
	    {
		selectionBar.add(new JCheckBox(objectClassNames.elementAt(i).toString(),true));
	    }
	selectionBar.addSeparator();
	selectionBar.setVisible(true);
	//	add(selectionBar);
    }
          
    public void mouseClicked(MouseEvent e)
    {	
	Object source = e.getSource();
    }

    public void mouseEntered(MouseEvent e)
    {}

    public void mouseExited(MouseEvent e)
    {

    }

    public void mousePressed(MouseEvent e)
    {

    }

    public void mouseMoved(MouseEvent e)
    {
    }
    
    public void mouseDragged(MouseEvent e)
    {
    }
    public void mouseReleased(MouseEvent e)
    {
    }


    // ListSelectionListener
    public void valueChanged(ListSelectionEvent e)
    {
    }

    // AktionListener:
    public void actionPerformed(ActionEvent e) 
    {
    }         

    // WindowListener
    public void windowActivated(WindowEvent e) 
    {}//          Invoked when the Window is set to be the active Window.

    public void windowClosed(WindowEvent e) 
    {
	System.out.println("bye");
    }//       Invoked when a window has been closed as the result of calling dispose on the window.


    public   void windowClosing(WindowEvent e) 
    {
	// free resources...
	VersionClass.freeResources();
	System.out.println("bye");	
    }//  Invoked when the user attempts to close the window from the window's system menu.

    public   void windowDeactivated(WindowEvent e) 
    {}//          Invoked when a Window is no longer the active Window.
    
    public   void windowDeiconified(WindowEvent e) 
    {}//          Invoked when a window is changed from a minimized to a normal state.
    
    public   void windowIconified(WindowEvent e) 
    {}//          Invoked when a window is changed from a normal to a minimized state.
    
    public   void windowOpened(WindowEvent e) 
    {}//
}
