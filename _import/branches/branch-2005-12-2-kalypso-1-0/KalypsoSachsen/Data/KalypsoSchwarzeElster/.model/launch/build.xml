<project default="fake">

	<property name="modell.template.dir" value="${project.dir}/.templates/Modell" />

    <!-- Scenario Test -->
    <property name="szenario_TestDwdUrl1" value="http://lfug-kv-01:8080/webdav/dwd/lm_test.txt" />
    <property name="szenario_TestDwdUrl2" value="http://lfug-kv-02:8080/webdav/dwd/lm_test.txt" />

	<!-- Scenario Echt -->
    <property name="szenario_EchtDwdUrl1" value="http://lfug-kv-01:8080/webdav/dwd/lm_normal.txt" />
    <property name="szenario_EchtDwdUrl2" value="http://lfug-kv-02:8080/webdav/dwd/lm_normal.txt" />

	
    <!-- define the requests -->
    <property name="requestN"
              value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,N&lt;/axes&gt;&lt;statusAxes&gt;N&lt;/statusAxes&gt;&lt;/request&gt;" />
    <property name="requestQ"
              value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,Q&lt;/axes&gt;&lt;statusAxes&gt;Q&lt;/statusAxes&gt;&lt;/request&gt;" />
    <property name="requestQTalsperren"
              value="${requestQ}" />
    <property name="requestQZufluss"
              value="${requestQ}" />
    <property name="requestW"
              value="&lt;request xmlns=&quot;request.zml.kalypso.org&quot;&gt;&lt;axes&gt;date,W&lt;/axes&gt;&lt;statusAxes&gt;W&lt;/statusAxes&gt;&lt;/request&gt;" />

	<!-- Zeitschritt der Berechnung: 3h-->
	<property name="interval.field" value="HOUR_OF_DAY"/>
	<property name="interval.amount" value="3"/>
	
	<!-- Vordefinierte Filter -->
    <property name="filterN"
              value="${requestN}&lt;filter&gt;&lt;intervallFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; mode=&quot;sum&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />
    <!-- Q/W: interpolation-filter -->
    <property name="filterW"
              value="${requestW}&lt;filter&gt;&lt;interpolationFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; defaultStatus=&quot;2&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;true&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />
    <property name="filterQ"
              value="${requestQ}&lt;filter&gt;&lt;interpolationFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; defaultStatus=&quot;2&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;true&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />

	<property name="filterQTalsperren"
              value="${requestQTalsperren}&lt;filter&gt;&lt;interpolationFilter xmlns=&quot;filters.zml.kalypso.org&quot; calendarField=&quot;HOUR_OF_DAY&quot; amount=&quot;3&quot; forceFill=&quot;true&quot; defaultValue=&quot;0.0&quot; defaultStatus=&quot;2&quot;/&gt;&lt;/filter&gt;" />

	<property name="filterQZufluss"
              value="${requestQZufluss}&lt;filter&gt;&lt;interpolationFilter xmlns=&quot;filters.zml.kalypso.org&quot; calendarField=&quot;HOUR_OF_DAY&quot; amount=&quot;3&quot; forceFill=&quot;true&quot; defaultValue=&quot;0.0&quot; defaultStatus=&quot;2&quot;/&gt;&lt;/filter&gt;" />

	<!--property name="filterN" 
			  value="${requestN}&lt;filter&gt;&lt;interpolationFilter xmlns=&quot;filters.zml.kalypso.org&quot; calendarField=&quot;HOUR_OF_DAY&quot; amount=&quot;3&quot; forceFill=&quot;true&quot; defaultValue=&quot;0.0&quot; defaultStatus=&quot;2&quot;/&gt;&lt;/filter&gt;" /-->
	
    <property name="filterCommitPrognoseQ"
              value="&lt;filter&gt;&lt;interpolationFilter amount=&quot;${interval.amount}&quot; calendarField=&quot;${interval.field}&quot; defaultStatus=&quot;4&quot; defaultValue=&quot;0.0&quot; forceFill=&quot;true&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;" />

	<property name="filterCommitPrognoseWDown" 
		value="&lt;filter&gt;&lt;roundFilter factor=&quot;5&quot; mode=&quot;ROUND_DOWN&quot; axisType=&quot;W&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;"/>
	<property name="filterCommitPrognoseWUp" 
		value="&lt;filter&gt;&lt;roundFilter factor=&quot;5&quot; mode=&quot;ROUND_UP&quot; axisType=&quot;W&quot; xmlns=&quot;filters.zml.kalypso.org&quot;/&gt;&lt;/filter&gt;"/>
	
	<!-- - - - - - - - - - - - - - - - - - 
          target: fake                      nur damit das Projekt nicht schreit
         - - - - - - - - - - - - - - - - - -->
	<target name="fake" />

	<!-- 
		 ================================= 
          target: create			Rechenvariante erzeugen
         ================================= 
    -->
	<target name="create" description="Erzeugt eine Rechenvariante">
		<echo message="Rechenvariante anlegen: ${calc.dir}" />

		<copy file="${project.dir}/modell.gml" tofile="${calc.dir}/calcCase.gml"/>
		<copy todir="${calc.dir}">
			<fileset dir="${project.dir}/.templates">
				<include name="*.gtt"/>
				<include name="*.gmt"/>
				<include name="*.gft"/>
				<include name="*.ott"/>
				<include name="*.odt"/>
				<include name="Zeitreihen/*.ott"/>
				<include name="Ergebnisse/Zeitreihen/*.ott"/>
			</fileset>
		</copy>
	</target>
	
	
    <!-- - - - - - - - - - - - - - - - - - 
          target: calculationProperties                      Initializes properties from .calculation
         - - - - - - - - - - - - - - - - - -->
    <target name="calculationProperties">
		<kalypso.gmlProperty gmlURL="${calc.url}/.calculation">
			<property name="startsimQ" featurepath="" featureProperty="startsimulation"/>
			<property name="startsimN" featurepath="" featureProperty="startsimulation"/>
			<property name="startforecast" featurepath="" featureProperty="startforecast"/>
			<!-- stopsim = startforecast + 48h -->
			<property name="stopsim" featurepath="" featureProperty="startforecast" dateoffset="48" dateoffsetfield="11"/>

			<property name="scenarioId" featurepath="" featureProperty="scenarioId" defaultValue=""/>
		</kalypso.gmlProperty>
		
		<echo message="Szenario der Rechenvariante ist: ${scenarioId}" />
		
		<!-- Unterscheide zwischen Katastrophentest und normalem Szenario -->
		<kalypso.multiequals arg1="${scenarioId}" arg2="test">
			<!-- Links fürs Abholen der Vorhersage-Zeitreihen -->
			<property name="ombrometerLink" valueThen="in1ObservationLink" valueElse="inObservationLink"/>
			<property name="pegelMessungLink" valueThen="in1ObservationLink" valueElse="inObservationLink"/>
			<property name="niederschlagMessungLink" valueThen="in2ObservationLink" valueElse="inObservationLink"/>
			<property name="niederschlagVorhersageLink" valueThen="in3ObservationLink" valueElse="in1ObservationLink"/>
			<property name="talsperreLink" valueThen="in1ObservationLink" valueElse="inObservationLink"/>
			<property name="vorgabeLink" valueThen="in1ObservationLink" valueElse="inObservationLink"/>
			
			<!-- Links für die Ablage der Vorhersage-Zeitreihen -->
			<property name="vorhersageLinkNormal" valueThen="out5ObservationLink" valueElse="out2ObservationLink"/>
			<property name="vorhersageLinkOben" valueThen="out4ObservationLink" valueElse="out1ObservationLink"/>
			<property name="vorhersageLinkUnten" valueThen="out3ObservationLink" valueElse="outObservationLink"/>

			<!-- DWD Daten -->
            <property name="dwdRasterRemoteURLs"
					  valueThen="${szenario_TestDwdUrl1},${szenario_TestDwdUrl2}"
                      valueElse="${szenario_EchtDwdUrl1},${szenario_EchtDwdUrl2}" />
		</kalypso.multiequals>
    	
        <property name="dwdRasterLocalURL" value="${calc.url}/dwd/lm_aktuell.txt" />
    </target>
	
	<!-- 
		 ================================= 
          target: update			Zeitreihen aktualisieren
         ================================= 
    -->
	<target name="update" depends="calculationProperties" description="Aktualisiert eine Rechenvariante">
		<echo message="Zeitreihen aktualisieren: ${calc.dir}" />

		<copy todir="${calc.dir}/Zeitreihen">
			<fileset dir="${project.dir}/.templates/Zeitreihen">
				<include name="*.gtt"/>
				<include name="*.gft"/>
				<include name="*.ott"/>
				<include name="*.odt"/>
			</fileset>
		</copy>
		
		<!-- TODO: überall mit requests arbeiten -->
		<!-- Omrbometer -->
		<kalypso.copyObservation gml="${project.url}/.model/observationConf/OmbrometerMapping.gml" featurePath="mappingMember" context="${calc.url}" targetObservation="outObservationLink" forecastFrom="${startforecast}" forecastTo="${stopsim}">
			<source property="${ombrometerLink}" from="${startsimN}" to="${startforecast}" filter="${filterN}"/>
			<metadata name="Szenario" value="${scenarioId}"/>
		</kalypso.copyObservation>

		<!-- Pegel -->
		<kalypso.copyObservation gml="${project.url}/.model/observationConf/PegelMessungMapping.gml" featurePath="mappingMember" context="${calc.url}" targetObservation="outObservationLink" forecastFrom="${startforecast}" forecastTo="${stopsim}">
			<source property="${pegelMessungLink}" from="${startsimQ}" to="${startforecast}" filter="${filterQ}"/>
			<metadata name="Szenario" value="${scenarioId}"/>
		</kalypso.copyObservation>
		
		<!-- Talsperren -->
		<kalypso.copyObservation gml="${project.url}/.model/observationConf/TalsperreMapping.gml" featurePath="mappingMember" context="${calc.url}" targetObservation="outObservationLink" forecastFrom="${startforecast}" forecastTo="${stopsim}">
			<source property="${talsperreLink}" from="${startsimQ}" to="${stopsim}" filter="${filterQTalsperren}"/>
			<metadata name="Szenario" value="${scenarioId}"/>
		</kalypso.copyObservation>

		<!-- Vorgaben: Zufluss und Abfluss -->
		<kalypso.copyObservation gml="${project.url}/.model/observationConf/VorgabeMapping.gml" featurePath="mappingMember" context="${calc.url}" targetObservation="outObservationLink" forecastFrom="${startforecast}" forecastTo="${stopsim}">
			<source property="${vorgabeLink}" from="${startsimQ}" to="${stopsim}" filter="${filterQZufluss}"/>
			<metadata name="Szenario" value="${scenarioId}"/>
		</kalypso.copyObservation>
		

        <!-- Definition der Quellen, der DWD-Raster (Vorhersage) -->
        <!-- Scenario TEST -->
        <property name="szenario_TestDwdUrl1"
                  value="http://lfug-kv-01:8080/webdav/dwd/lm_test.txt" />
        <property name="szenario_TestDwdUrl2"
                  value="http://lfug-kv-02:8080/webdav/dwd/lm_test.txt" />
        <!-- Scenario Echt -->
        <property name="szenario_EchtDwdUrl1" value="http://lfug-kv-01:8080/webdav/dwd/lm_normal.txt" />
        <property name="szenario_EchtDwdUrl2" value="http://lfug-kv-02:8080/webdav/dwd/lm_normal.txt" />

        <echo message="aktualisiere DWD-Raster im Rechenfall" />
        <Kalypso.fetchFromURL context="${calc.url}"
                              src="${dwdRasterRemoteURLs}"
                              listseparator=","
                              dest="${calc.dir}/dwd/lm_aktuell.txt" />
		
		<!-- Gebietsniederschlag neu berechnen -->
		<antcall target="gebietsniederschlag"/>
	</target>

	<!-- 
		 ================================= 
          target: runCalculation			
         ================================= 
    -->
	<target name="runCalculation" description="Führt die eigentliche Simulationsrechnung durch">
		<echo message="Berechnung wird durchgeführt: ${calc.path}"/>
		
		<kalypso.runCalculation calccasefolder="${calc.path}" typeid="org.kalypso.model.wasy.schwarzeelster">
		    <input id="CONTROL_GML" path=".calculation" relativeToCalcCase="true"/>
		    <input id="GML" path="calcCase.gml" relativeToCalcCase="true"/>

		    <input id="ZML" path="Zeitreihen" relativeToCalcCase="true"/>
		    
		    <output id="ERGEBNISSE" path="Ergebnisse" relativeToCalcCase="true"/>
		    <output id="NATIVE_IN_DIR" path="Ergebnisse/.native/in" relativeToCalcCase="true"/>
		    <output id="NATIVE_OUT_DIR"  path="Ergebnisse/.native/out" relativeToCalcCase="true"/>

		    <clearAfterCalc path="Ergebnisse" relativeToCalcCase="true"/>
		</kalypso.runCalculation>
		
		<copy file="${calc.dir}/Ergebnisse/calcCase.gml" tofile="${calc.dir}/calcCase.gml" overwrite="true" failonerror="false"/>		
	</target>
	
    <!-- ================================= 
          target: exportVorhersagen              
         ================================= -->
    <target name="exportVorhersagen" depends="calculationProperties" description="Exportiert die Prognosen nach PSICompact">
        <echo message="Vorhersagezeitreihen werden nach PSICompact geschrieben..."/>
		<echo message="Szenario-ID der Rechenvariante ist: ${scenarioId}" />
		<echo message="" />

    	<!-- Einmal normal und je einmal für die untere und die obere Umhüllende -->
    	
    	<!-- Die normale Umhüllende soll nicht mehr abgelegt werden
    	<echo message="Ablage der Rechenergebnisse"/>
    	<kalypso.commitPrognoses context="${calc.url}" featurepath="${exportPrognosenFeaturePath}" gml="${project.url}/.model/observationConf/VorhersageMapping.gml" localobs="local1" remoteobs="${vorhersageLinkNormal}" runasync="false" IgnoreIllegalFeaturePath="true"/>
    	-->
    	
    	<echo message="Ablage der oberen Umhüllenden W"/>
    	<kalypso.commitPrognoses context="${calc.url}" featurepath="${exportPrognosenFeaturePath}" gml="${project.url}/.model/observationConf/VorhersageMappingW.gml" sourcefilter="${filterCommitPrognoseQ}" localobs="local3" remoteobs="${vorhersageLinkOben}" runasync="false" IgnoreIllegalFeaturePath="true"/>
    	<echo message="Ablage der unteren Umhüllenden W"/>
    	<kalypso.commitPrognoses context="${calc.url}" featurepath="${exportPrognosenFeaturePath}" gml="${project.url}/.model/observationConf/VorhersageMappingW.gml" sourcefilter="${filterCommitPrognoseQ}" localobs="local2" remoteobs="${vorhersageLinkUnten}" runasync="false" IgnoreIllegalFeaturePath="true"/>

    
    	<echo message="Ablage der oberen Umhüllenden Q"/>
    	<kalypso.commitPrognoses context="${calc.url}" featurepath="${exportPrognosenFeaturePath}" gml="${project.url}/.model/observationConf/VorhersageMappingQ.gml" sourcefilter="${filterCommitPrognoseWUp}" localobs="local3" remoteobs="${vorhersageLinkOben}" runasync="false" IgnoreIllegalFeaturePath="true"/>
    	<echo message="Ablage der unteren Umhüllenden Q"/>
    	<kalypso.commitPrognoses context="${calc.url}" featurepath="${exportPrognosenFeaturePath}" gml="${project.url}/.model/observationConf/VorhersageMappingQ.gml" sourcefilter="${filterCommitPrognoseWDown}" localobs="local2" remoteobs="${vorhersageLinkUnten}" runasync="false" IgnoreIllegalFeaturePath="true"/>
</target>
	
	<!-- ================================= 
          target: gebietsniederschlag              
         ================================= -->
	<target name="gebietsniederschlag" depends="calculationProperties" description="Umrechnung in Gebietsniederschlag">
		<antcall target="updateForecastN"/>
		
		<kalypso.gmlWeight 
			modelurl="${calc.url}/calcCase.gml" 
			featurepathtarget="PegelCollectionAssociation/PegelMember[Einzugsgebiet]" 
			propzmltarget="Niederschlag_rechnung" 
			proprelationweightmember="gewichtung" 
			propweight="faktor" 
			proprelationsourcefeature="ombrometerMember" 
			propzmlsource="precipitation" 
			targetcontext="${calc.url}" 
			from="${startsimN}" 
			forecastfrom="${startforecast}" 
			to="${stopsim}" />
	</target>
	
    <target name="updateForecastN" depends="calculationProperties">
        <echo message="aktualisiere Gebietsniederschläge (Vorhersage aus DWD-Raster ${dwdRasterLocalURL} )" />
        <kalypso.dwdTask dwd2zmlconfurl="${project.url}/.model/dwd/dwdZmlConf.xml"
                         obsrasterurl="${dwdRasterLocalURL}"
                         targetcontext="${calc.dir}"
                         description="Berechnung Gebietsniederschlagsmodell"
                         from="${startsimN}"
                         forecastfrom="${startforecast}"
                         to="${stopsim}"
                         zmlfilter="${filterN}">
            <metadata name="Szenario" value="${scenarioId}" />
        </kalypso.dwdTask>
    </target>
	
</project>