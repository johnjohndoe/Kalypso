package org.kalypso.model.wspm.pdb.db.mapping;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.apache.commons.lang3.StringUtils;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.kalypso.commons.java.util.AbstractModelObject;
import org.kalypso.model.wspm.pdb.db.constants.DocumentConstants;

/**
 * Document generated by hbm2java
 */
@Entity
@Table( name = "document", schema = "pdb", uniqueConstraints = @UniqueConstraint( columnNames = "filename" ) )
public class Document extends AbstractModelObject implements Serializable, DocumentConstants, IElementWithDates
{
  private long m_id;

  private String m_name;

  private com.vividsolutions.jts.geom.Point m_location;

  private String m_filename;

  private String m_mimetype;

  private Date m_creationDate;

  private Date m_editingDate;

  private String m_editingUser;

  private Date m_measurementDate;

  private BigDecimal m_shotdirection;

  private BigDecimal m_viewangle;

  private String m_description;

  private CrossSection m_crossSection;

  private WaterBody m_waterBody;

  private State m_state;

  public Document( )
  {
  }

  public Document( final long id, final String name, final String filename, final Date creationDate, final Date editingDate, final String editingUser )
  {
    m_id = id;
    m_name = name;
    m_filename = filename;
    m_creationDate = creationDate;
    m_editingDate = editingDate;
    m_editingUser = editingUser;
  }

  public Document( final long id, final String name, final com.vividsolutions.jts.geom.Point location, final String filename, final String mimetype, final Date creationDate, final Date editingDate, final String editingUser, final Date measurementDate, final BigDecimal shotdirection, final BigDecimal viewangle, final String description, final CrossSection crossSection, final WaterBody waterBody, final State state )
  {
    m_id = id;
    m_waterBody = waterBody;
    m_crossSection = crossSection;
    m_state = state;
    m_name = name;
    m_location = location;
    m_filename = filename;
    m_mimetype = mimetype;
    m_creationDate = creationDate;
    m_editingDate = editingDate;
    m_editingUser = editingUser;
    m_measurementDate = measurementDate;
    m_shotdirection = shotdirection;
    m_viewangle = viewangle;
    m_description = description;
  }

  @Id
  @Column( name = "id", unique = true, nullable = false, precision = 20, scale = 0 )
  @GeneratedValue( strategy = GenerationType.SEQUENCE, generator = "document_id_seq" )
  @SequenceGenerator( name = "document_id_seq", sequenceName = "pdb.seq_pdb" )
  public long getId( )
  {
    return m_id;
  }

  public void setId( final long id )
  {
    m_id = id;
  }

  @Column( name = "name", nullable = false, length = 100 )
  public String getName( )
  {
    return m_name;
  }

  public void setName( final String name )
  {
    m_name = name;
  }

  @Column( name = "location", columnDefinition = "Geometry" )
  public com.vividsolutions.jts.geom.Point getLocation( )
  {
    return m_location;
  }

  public void setLocation( final com.vividsolutions.jts.geom.Point location )
  {
    m_location = location;
  }

  @Column( name = "filename", nullable = false, length = 2048 )
  public String getFilename( )
  {
    return m_filename;
  }

  public void setFilename( final String filename )
  {
    m_filename = filename;
  }

  @Column( name = "mimetype", length = 50 )
  public String getMimetype( )
  {
    return m_mimetype;
  }

  public void setMimetype( final String mimetype )
  {
    m_mimetype = mimetype;
  }

  @Override
  @Temporal( TemporalType.TIMESTAMP )
  @Column( name = "creation_date", nullable = false, length = 22 )
  public Date getCreationDate( )
  {
    return m_creationDate;
  }

  @Override
  public void setCreationDate( final Date creationDate )
  {
    final Object oldValue = m_creationDate;

    m_creationDate = creationDate;

    firePropertyChange( PROPERTY_CREATIONDATE, oldValue, creationDate );
  }

  @Override
  @Temporal( TemporalType.TIMESTAMP )
  @Column( name = "editing_date", nullable = false, length = 22 )
  public Date getEditingDate( )
  {
    return m_editingDate;
  }

  @Override
  public void setEditingDate( final Date editingDate )
  {
    final Object oldValue = m_editingDate;

    m_editingDate = editingDate;

    firePropertyChange( PROPERTY_EDITINGDATE, oldValue, editingDate );
  }

  @Override
  @Column( name = "editing_user", nullable = false, length = 50 )
  public String getEditingUser( )
  {
    return m_editingUser;
  }

  @Override
  public void setEditingUser( final String editingUser )
  {
    final Object oldValue = m_editingUser;

    m_editingUser = editingUser;

    firePropertyChange( PROPERTY_EDITINGUSER, oldValue, editingUser );
  }

  @Override
  @Temporal( TemporalType.TIMESTAMP )
  @Column( name = "measurement_date", length = 22 )
  public Date getMeasurementDate( )
  {
    return m_measurementDate;
  }

  @Override
  public void setMeasurementDate( final Date measurementDate )
  {
    final Object oldValue = m_measurementDate;

    m_measurementDate = measurementDate;

    firePropertyChange( PROPERTY_MEASUREMENTDATE, oldValue, measurementDate );
  }

  @Column( name = "shotdirection", precision = 8, scale = 3 )
  public BigDecimal getShotdirection( )
  {
    return m_shotdirection;
  }

  public void setShotdirection( final BigDecimal shotdirection )
  {
    m_shotdirection = shotdirection;
  }

  @Column( name = "viewangle", precision = 8, scale = 3 )
  public BigDecimal getViewangle( )
  {
    return m_viewangle;
  }

  public void setViewangle( final BigDecimal viewangle )
  {
    m_viewangle = viewangle;
  }

  @Column( name = "description", length = 255 )
  public String getDescription( )
  {
    return m_description;
  }

  public void setDescription( final String description )
  {
    m_description = description;
  }

  @ManyToOne( fetch = FetchType.LAZY )
  @JoinColumn( name = "cross_section_id" )
  public CrossSection getCrossSection( )
  {
    return m_crossSection;
  }

  public void setCrossSection( final CrossSection crossSection )
  {
    m_crossSection = crossSection;
  }

  @ManyToOne( fetch = FetchType.LAZY )
  @JoinColumn( name = "water_body_id" )
  public WaterBody getWaterBody( )
  {
    return m_waterBody;
  }

  public void setWaterBody( final WaterBody waterBody )
  {
    m_waterBody = waterBody;
  }

  @ManyToOne( fetch = FetchType.LAZY )
  @JoinColumn( name = "state_id" )
  public State getState( )
  {
    return m_state;
  }

  public void setState( final State state )
  {
    m_state = state;
  }

  /**
   * Gets the file name (i.e. not the path as getFilename).
   */
  @Transient
  public String getFilenameName( )
  {
    final String filepath = getFilename();
    if( StringUtils.isBlank( filepath ) )
      return null;

    final IPath path = Path.fromPortableString( filepath );
    return path.lastSegment();
  }
}