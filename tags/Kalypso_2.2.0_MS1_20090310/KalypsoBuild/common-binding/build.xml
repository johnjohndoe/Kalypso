<?xml version="1.0" encoding="UTF-8" ?>

<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Common build file for all binding projects.

The following targets are defined here:
- clean: cleans all generated stuff
- init
- generate: runs xjc against the schemas to generate the source files

It is designed to be imported using the following syntax:

 <import file="${workspace}/KalypsoBuild/common-binding/build.xml" />

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->

<project name="commonbinding" default="generate">

	<!-- define following properties in importing script
	
	<property name="project" value="full path of the project..." />
	<property name="project-name" value="will be used for naming the jar containing the bindings..." />
	
	** and the following patternset defines, which .xsd files relativ to the project basedir 
	** files are imported 
	
	<patternset id="binding.schemata">
      <include name="etc/schemas/sld/**/*.xsd"/>
    </patternset>

	-->

	<dirname property="commonbinding.basedir" file="${ant.file.commonbinding}" />
	<property file="${commonbinding.basedir}/../common.properties" />

	<property name="gen.srcbind" value="${project}/srcbind" />

	<path id="binding.classpath">
		<fileset dir="${jwsdp}">
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="binding.classpath" />

	<target name="init" description="erzeugt die Build-Verzeichnisse">
		<mkdir dir="${gen.srcbind}" />
	</target>

	<target name="clean" description="cleans it up - totally">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${gen.srcbind}" includes="**/*" />
		</delete>
	</target>

	<target name="generate" depends="init" description="erzeugt die sourcen">
		<echo message="Generating binding sources fÃ¼r ${project}" />	
		<xjc destdir="${gen.srcbind}" extension="true" removeoldoutput="true" source="2.0">
			<!-- stackSize="60mb"> -->
			<arg line="${xjc-args}" />
			<schema dir="${project}">
				<patternset refid="binding.schemata" />
			</schema>
<!--  <binding dir="${project}">
		  	<patternset refid="binding.binding" />
			</binding>-->
			<!--
			<classpath>
			      <pathelement path="${classpath}"/>
			      <pathelement location="lib/helper.jar"/>
			    </classpath>
-->
			<!-- use depends ??
	  -->
			<!-- Important Note: the produces element specifies the
			files from which the generate-process is depending. If 
			the files are up-to-date (compared to the schemas) then
			nothing is done. It is only when changes are discovered
			that the xjc re-generates the binding-source.
			
			Usually a 'produces' comes with a 'depends' element. But
			according to the documentation of the xjc-task, by default
			the schemas as defined in the 'schema'-element are
			automatically added to the 'depends'-set. See the end of
			this build-file for more information (copy of the xjc-doc
			on this subject).
			
			TRICK: if sometimes the files are handled as up-to-date
			but they are actually not (for whatever reason, bug?),
			comment out the 'produces'-element. Else you should leave 
			it here because if makes the whole deploy process much
			faster!
			-->
      <!--produces file="${project}/lib/${dest.file.name}" /-->
		</xjc>
		
	</target>

	<target name="compile" depends="generate">
		<echo message="Compiling binding sources for ${project-name}" />
		<javac srcdir="${gen.srcbind}" destdir="${project.bin}" classpathref="binding.classpath" debug="${flag-debug}" optimize="${flag-optimize}" />
	</target>

</project>

<!-- copy of the XJC-doc concerning "Up-to-date Check"

By default, the XJC binding compiler always compiles the inputs. However, with 
a little additional setting, it can compare timestamps of the input files and 
output files and skip compilation if the files are up-to-date.

Ideally, the program should be able to find out all the inputs and outputs and 
compare their timestamps, but this is difficult and time-consuming. So you have 
to tell the task input files and output files manually by using nested <depends>
and <produces> elements. Basically, the XJC binding compiler compares the 
timestamps specified by the <depends> elements against those of the <produces>
set. If any one of the "depends" file has a more recent timestamp than some 
of the files in the "produces" set, it will compile the inputs. Otherwise 
it will skip the compilation.

This will allow you to say, for example "if any of the .xsd files in this 
directory are newer than the .java files in that directory, recompile the schema".

Files specified as the schema files and binding files are automatically added 
to the "depends" set as well, but if those schemas are including/importing 
other schemas, you have to use a nested <depends> elements. No files are added
 to the <produces> set, so you have to add all of them manually.

A change in a schema or an external binding file often results in a Java file 
that stops being generated. To avoid such an "orphan" file, it is often desirable
to isolate all the generated code into a particular package and delete it before
compiling a schema. This can be done by using the removeOldOutput attribute. This
option allows you to remove all the files that match the "produces" filesets 
before a compilation. Be careful when you use this option so that you don't 
delete important files.
-->