<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="filters.zml.kalypso.org" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xlinkext="http://www.w3.org/1999/xlinkext" xmlns:filters="filters.zml.kalypso.org" xmlns:vc="valuecomp.filters.zml.kalypso.org">
	<import namespace="http://www.w3.org/1999/xlinkext" schemaLocation="../xlink/xlinksext.xsd"/>
	<import namespace="valuecomp.filters.zml.kalypso.org" schemaLocation="./zmlFiltersValueComp.xsd"/>
	
	<!-- filter hierarchy base type -->
	<complexType name="abstractFilterType" abstract="true"/>
	<element name="filter" type="filters:abstractFilterType"/>
	
	<!-- Filter: valueFilter -->
	<complexType name="valueFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="vc:valueComp" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<element name="valueFilter" type="filters:valueFilterType" substitutionGroup="filters:filter"/>
	
	<!-- Filter: Math Operation on values -->
	<complexType name="operationFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>
				<attribute name="operator" type="string"/>
				<attribute name="operand" type="string"/>
			</extension>
			<!-- +,-,/,*-->
			<!-- e.g. 5 -->
		</complexContent>
	</complexType>
	<element name="operationFilter" type="filters:operationFilterType" substitutionGroup="filters:filter"/>
            
    <!-- Filter: intervall building filter 
        required axis: date-axis value-axis        
        optionam axis: status-axis
        result will have same axis as source observation
        date axis will be build with intervalls,
        value-axis will be build calculating summs or intensity over intervall (resp. mode),
        status axis will be build using bitmask on source-status
                
        more than one status-axis is supported
        more than one value-axis is supported

        restrictions:
        value-axis must be type Double
        -->
	<complexType name="intervallFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>
                <!-- mode: "sum" or "intensity"-->
				<attribute name="mode" type="string" default="intensity"/>

                <!-- calendar field to build intervall--> 
            	<attribute type="string" name="calendarField"/>
				<!-- amount of time for the step -->
				<attribute type="int" name="amount"/>
                <!-- startvalue of calendar field -->
                <attribute type="int" name="startCalendarvalue" use="optional" default="0"/>
                <attribute type="string" name="startCalendarfield" use="optional"/>
                
                <!-- default values are used, when rangeset request is greater than base timeseries -->

				<!-- default value to use when filling absent values -->
				<attribute type="double" name="defaultValue" default="0" use="optional"/>
				<!-- default status to use when filling absent status -->
				<attribute type="int" name="defaultStatus" default="2" use="optional"/>
			</extension>		
		</complexContent>
	</complexType>
	<element name="intervallFilter" type="filters:intervallFilterType" substitutionGroup="filters:filter"/>
    
	<!-- Filter: Math Operation between Filters -->
	<complexType name="nOperationFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" maxOccurs="unbounded"/>
				</sequence>
				<attribute name="operator" type="string"/>
			</extension>
			<!-- +, -, *, / oder min, max, avg ... -->
		</complexContent>
	</complexType>
	<element name="nOperationFilter" type="filters:nOperationFilterType" substitutionGroup="filters:filter"/>

	<!-- Filter: interpolation (interpolates the values using the date axis (ascending order) ) -->	
	<complexType name="interpolationFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>
				<!-- which field of the date will be used for steping through the timeserie -->
				<attribute type="string" name="calendarField"/>
				<!-- amount of time for the step -->
				<attribute type="int" name="amount"/>
				<!-- when true, fills the model with defaultValue when no base value -->
				<attribute type="boolean" name="forceFill"/>
				<!-- default value to use when filling absent values -->
				<attribute type="string" name="defaultValue"/>
				<!-- value of the default status when no base status -->
				<attribute type="int" name="defaultStatus"/>
				<!-- when true (only in conjunction with forceFill) fill the last tupples of the model with copies of the last valid tupple instead of using the default value -->
				<attribute type="boolean" name="fillLastWithValid" default="false"/>
			</extension>
		</complexContent>
	</complexType>
	<element name="interpolationFilter" type="filters:interpolationFilterType" substitutionGroup="filters:filter" />

	<!-- Filter: datahole (detects hole in the data and sets the status accordingly) -->
	<complexType name="dataholeFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>
				<!-- invalid value that must be checked (for instance -999) -->
				<attribute name="value" type="double"/>
				<!-- value of the status to generate if an invalid value is found -->
				<attribute name="status" type="int"/>
				<!-- if true, the value of replaceWith will be used instead of the original value -->
				<attribute name="replace" type="boolean" use="optional" default="false" />
				<!-- the value will be replaced by this one -->
				<attribute name="replaceWith" type="double" use="optional"/>
			</extension>
		</complexContent>
	</complexType>
	<element name="dataholeFilter" type="filters:dataholeFilterType" substitutionGroup="filters:filter"/>

	<!-- Filter: forecast (merges the tupples on the date axis) -->
	<complexType name="forecastFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="1" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<element name="forecastFilter" type="filters:forecastFilterType" substitutionGroup="filters:filter" />
	
	<!-- Filter: ZML-Link -->
	<complexType name="zmlFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element name="zml" type="xlinkext:SimpleLinkType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<element name="zmlFilter" type="filters:zmlFilterType" substitutionGroup="filters:filter"/>
	
	<!-- Filter: Linear-Progressive-Transformation -->
   <!--    
     policy: if dateBeginn or dateEnd is null,
     than assume values in following order:
        1. use from/to from request
        2. use first/last from base observation
    -->
   
	<complexType name="tranProLinFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>
				<attribute type="dateTime" name="dateBegin" use="optional"/>
				<attribute type="dateTime" name="dateEnd" use="optional"/>
               	<attribute name="operator" type="string" />                
				<attribute type="double" name="operandBegin"/>
				<attribute type="double" name="operandEnd"/>
             	<attribute name="statusToMerge" type="int" default="0" use="optional"/>
				<attribute type="string" name="axisTypes" default="*" use="optional"/>
                <!-- axistypes to transform
                    exapmles:  axisTypes="QT" : Q and T axis will be transformed
                    exapmles:  axisTypes="*" : all axis will be transformed
                    exapmles:  axisTypes="" : all axis will be transformed
                statusaxis gets operated with statusToMerge
                dateaixs will never be transformed
                -->                
			</extension>
		</complexContent>
	</complexType>
	<element name="tranProLinFilter" type="filters:tranProLinFilterType" substitutionGroup="filters:filter" />
	
	<!-- Rounding filter -->
    <!-- Filter: intervall building filter 
    	applies to every value of a given type of the target observation the followin operations:
    	
    	- divide by the given factor
    	- BigDecimal.setScale( 0, roundMode )
    	- multiply by the given factor
    	
        restrictions:
        value-axis must be of type Double
        
        Example: round to the first digit: use factor 10
     -->
	<complexType name="roundFilterType">
		<complexContent>
			<extension base="filters:abstractFilterType">
				<sequence>
					<element ref="filters:filter" minOccurs="0"/>
				</sequence>

                <!-- Factor which will be applied before and after rounding --> 
            	<attribute type="int" name="factor"/>
            	
            	<!-- One of the BigDecimal.ROUND_ constants -->
            	<attribute type="string" name="mode"/>

            	<attribute type="string" name="axisType"/>
			</extension>		
		</complexContent>
	</complexType>
	<element name="roundFilter" type="filters:roundFilterType" substitutionGroup="filters:filter"/>
	
</schema>
