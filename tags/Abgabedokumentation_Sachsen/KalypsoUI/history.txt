###############################################################################
				
					Änderungshistorie von Kalypso

NB: für die Liste der BUGS, siehe KalypsoDoc/todos/TODOs.xls

###############################################################################

- Bug75: "Fehler beim Drücken auf 'optimieren' (Widget war disposed	!)"
- Bug41: "Beim Öffnen mehrerer Tabellen können über Tabelle-Spalten nur die Elemente der zuerst geöffneten Tabelle ausgewählt werden auch wenn eine andere Tabellenart  aktiv ist."
- Gis-Tabelle: die Sortierung kann durch ein erneutes Drücken auf den Spaltenkopf wieder ausgestellt werden; also
1. vorwärts, 2. rückwärts, 3. unsortiert
- Bugfix: Die Keys der Gis-Tabellen wurden im Wizard nicht wieder freigegeben
- TableView-Template kann jetzt Alignment (SWT-Konstanten für Spalten) und einen Formatstring (noch nicht unterstüzt) beinhalten
- Bug #73: "Locals: Darstellung von , und . Sollten für allen Tabellen gleich sein (GIS Table: .)" behoben
- PoolView (in neuem Projekt KalypsoDebug), welche den Zustand des Pools anzeigt
- Exporte (Datei und Bericht) für Karte
- FeatureTable: unterstützt jetzt Editieren durch Dialog-Popups -> innere Features werden über einen Feature-Dialog editiert
- FeatureDialog (z.B. bei Bearbeiten im Baum): unterstützt jetzt auch 'innere' Features. Standarmässig werden
diese als Tabellen bzw. innere Gruppen dargestellt. Über die Vorlage wäre auch ein editieren innerer Featueres
über einen Button möglich.
- Bug77: Spree: in den Ergebnissen (Abfluss) gab es manchmal unsinnige 0en, die in den Ergebnissen als
seltsame Simulationsganglinie aufgefallen sind.
- Bug71: Scrollbar bei Feature-Edit in Karte, Dialog grössenveränderbar
- Bug72: Refresh der Tabelle beim Rechnen im Wizard, Knöpfe können trotzdem nicht gedrückt werden
- Extension Points (Repository-Factory und ZML-Import) verbessert, dass die basedOn-property gesetzt ist ->
unterstüzung der Eingabe 
- Bug75: bei 'Modell aktualisieren' (d.h. insbesondere in der Start-Seite) wurden lokale Rechenvairanten immer gelöscht,
wenn sie nicht auch auf dem Server waren.
- Fake-PSICompact: jetzt sind alle Spree-W-Zmls eindeutig definiert (Achseneinheit).
- neue MultiStatus Klasse im KalypsoUI plugin: optimiert um in Loops benutzt zu werden,
  da wo nicht direkt einen Status zurückgeben werden muss, sondern erst beim vollständigen
  Bearbeitung der Loop (Beispiel: Siehe GrafikLauncher und ExportResultsWizardPage).
- Fehlerbehanldung verbessert in ExportResultsWizardPage: der Benutzer wird besser informiert
  wenn eine Zeitreihe nicht zurückgespeichert werden konnte.
- GrafikLauncher:
  * Fehlerbehandlung verbessert
  * Alarmstufen werden ohne Nachkommastellen angezeigt
- Todo #23: Neues Popup-Menu in der ObservationTable. Vereinfacht die Eingabe von Werte auf mehrere Zeilen.
- ObservationTable: Copy/Paste (auch mit Excel) geeignet
- Bug #79
- Bug #80
- Bug #83
- Bug #84
- Bug #47

----------------
Version 0.0.5 (Deploy vom 23.02.2005)
----------------
- Bugfix: Die (manchmal) zufällig Farbvergabe im Wizard ist korrigiert.
- Wizard: Spaltenbeschriftung und Legendeneinträge jetzt frei konfigurierbar
- Wizard: Diagrammfarben für Kurven können jetzt festgelegt werden
- FeatureEditor: jetzt mit Scrollbar
- Beim Neuanlegen von Features (z.B. Baumansicht) werden diese mit Standardwerten gefüllt
- Feature-Baumansicht: beim Refresh des Baums (falls sich das GML-Modell ändert) kollabiert der Baum nicht mehr (besser gesagt:
öffnet sich wider wie vorher)
- Bugfix Wizard: bei den Dialogen mit Wechsel zwischen zwei Diagrammansichten (Z-B. W - Q), springt die Ansicht 
beim Durchführen der Berechnung nicht mehr nach Q (leider musste dafür die Position des Knopfs geändert werden :-( )
- Bei GIS-Tabellen jetzt auch Eingabe von Dezimahlzahlen mit Komma ',' möglich
- Bugfix SpreePlugin: Bei Leerstellen in der Bodenfeuchtentabelle gabs ne NullpointerException. 
Jetzt Behandlung wie bei 0.0: optimaler Wert wird ermittelt und übernommen.
- Bericht-Export: endlich in einer erste Version implementiert. Konfiguration möglich
  über Vorlagen, mit Tokens-replace Prinzip.
- ZML: WQObservationFilter wird jetzt automatisch beim Laden einer Zeitreihe erzeugt. Die
  Zeitreihe muss als WQ-Zeitreihe (sprich WQParameter vorhanden) definiert sein.
- Bug #1
- Bug #11
- Bug #14
- Bug #15
- Bug #21
- Bug #28
- Bug #33
- Bug #36
- Bug #42
- Bug #46
- Bug #52
- Bug #58
- Bug #59
- Bug #61
- Bug #65

----------------
Version 0.0.4 (Deploy vom 10.02.2005)
----------------
- Bugfix: über mehrere Schemata-Dateien verstreute Feature-Definitionen liessen sich nicht parsen
- Bugfix: der Tree-Editor hat die geladenen GMLs im Pool nicht mehr freigegeben, also beim erneuten öffnen
auch nicht erneut geladen
- Bugfix: falls beim Laden über den Pool oder beim Informieren der Keylistener eine Exception auftrat, wurde ein
key als immer noch ladend markiert, und konnte nicht mehr neu geladen werden
- ZML-Format erweitert: Values können jetzt in einem CDATA-Block im <data/> Element
  verlinkt werden. Dabei benutzt man die selbe Methodik wie bei verlinkte Dateien,
  nur das href-Attribut soll leer sein oder "#data" beinhalten.
- AbstractCalcWizardPage: beim WE-Modell z.B. werden die ZMLs nur einzeln in der Tabelle
  angezeigt. Dies führte zum Bug: Änderungen gehen verloren, sobald man die Selektion
  in der Karte wächselt. Jetzt ist dieses Bug behoben: nach eine Selektion wird die
  Observation gespeichert (siehe AbstractCalcWizardPage.onModellChange())
- Die Obs-Diag Legende im Wizard wird wieder angezeigt. Problem war aufgetaucht
  nach dem letzten Refactoring. Der showLegend flag war immer auf false gesetzt
  im DiagViewTemplate-Konstruktor.
- Bug #38
- Bug #44
- Bug #48
- Bug #49
- Bug #50
- Bug #51
- Bug #54
- Bug #55
- Bug #56
- Bug #57
- Bug #62
- Bug #63

----------------
Version 0.0.3 (Deploy vom 26.01.2005)
----------------
- Refactoring in Observation Table und Diagram Templates (viele Änderungen)
- Observation Table Template: die RenderingRules können jetzt auch eine 
	Icon-Spezifikation beinhalten (<icon> Tag).
	Standardmäßig werden "question", "warning", und "write" als String anerkannt
	und die entsprechende Icons werden dargestellt (Siehe KalypsoStatusUtils). Man
	kann aber auch eine URL
	Beispiele:
	<renderingrule mask="4">
        <tooltip>Eingabe erforderlich</tooltip>
    	<icon>http://eine-web-adresse/icon.gif</icon>
    </renderingrule>
	<renderingrule mask="8">
        <tooltip>Vom Benutzer geändert</tooltip>
    	<icon>write</icon>
    </renderingrule>

- BUG #3 ok
- BUG #25 ok
- BUG #31 ok
- BUG #32 ok
- BUG #38 ok

----------------
Version 20050118
----------------
- Refactoring in: IAxis und ITuppleModel.
	Position der Achse nicht mehr in IAxis, sondern ITuppleModel abhängig.
	Achsen sind gleich wenn dataClass, type, unit, und key gleich sind.

- BUG #26 ok
- BUG #27 ok - IAxis erweitert um die "isPersistable" Eigenschaft. Bei der
	WQObservationFilter bekommt der generierte Achse für dieser Eigenschaft
	den Wert 'false'.

- Optimierung für WeisseEslter Modell implementiert

----------------
Version 20050104
----------------
- Menü 'Modell' aufgeteilt in 'Modell' und 'Rechenvariante'
	- neue Menüpunkte:
				Rechenfall neu
				Rechenfall archivieren
				Rechenfall vom Server laden
				Rechenfall: Zeitreihen aktualisieren
- Rechenfall neu: 
	* 'Weiter' Knopf ist automatisch selektiert
	* Bugfix: Fehler, falls im Navigator nichts selektiert war
- Modeler Perspective: Standardeinstellungen für Menüs 'Neu' und 'Sicht anzeigen' überarbeitet

- ZmlObservation: wenn eine Zml vom Server geholt wird, wird ihre ID als Metadata-Eintrag
	gespeichert.

- PSICompactAdapter:
	* Jetzt werden auch die Einheiten berücksichtigt und 
	zwischen Kalypso und PSICompact konvertiert.
	* Der ArchivTyp wird abhängig vom Datentyp genutzt. Z.B. Niederschläge
	übernehmen Werte aus dem Stundenarchiv lesen.
	* Der PSI-Status wird folgendermassen in der Kalypso-Status umgewandelt:
	- STATUS_AUTO 		--> BIT_OK (Wert ist korrekt)
	- STATUS_ERSALLG 	--> BIT_CHECK (Wert muss geprüft werden)
	- STATUS_MANKOR		--> BIT_USER_MODIFIED (Durch Benutzer geändert)
	- STATUS_NACH 		--> BIT_CHECK (Wert muss geprüft werden)
	- STATUS_NORM 		--> BIT_CHECK (Wert muss geprüft werden)
	- STATUS_NORMALLG 	--> BIT_CHECK (Wert muss geprüft werden)
	- STATUS_OK 		--> BIT_OK (Wert ist korrekt)
	- STATUS_UNDEF 		--> BIT_CHECK (Wert muss geprüft werden)
	* In die andere Richtung (von Kalypso nach PSI) wird keine Konvertierung
	durchgeführt weil PSI automatisch der Status auf STATUS_REKO setzt
	( Siehe Kommentar von PSI in PSICompact.java ).
	
- CalcWizard: eine Protokollierung wird automatisch durchgeführt wenn Zeitreihe
	ausgelöst werden. Dabei bekommt der Benutzer eine Warnungmeldung durch ein
	ErrorDialog. Die Meldung fasst die Fehler zusammen. Gleichzeitig wird eine
	Logdatei erstellt mit umfassender Information.

- InterpolationFilter: wenn die grundliegende Observation keine Werte liefert aber
	fill ist gesetzt, dann werden lauter 'default' Werte im angegebenen Datumsbereich
	erzeugt. Der Status wird nicht interpoliert, sondern es wird ein bitwise
	OR Operator benutzt. Der default Status (für default Werte) kann auch angegeben
	werden.

- DataHoleFilter: TODO testen. Der DataHoleFilter kann angewendet werden bei
	Zeitreihen die möglicherweise 'Löcher' in die Daten haben. Diese Löcher
	werden üblicherweise mit -999 o.ä. markiert. Der DataHoleFilter setzt
	dabei ein konfigurierbare Wert und ein entsprechende Status (Wert muss
	kontrolliert werden).

- PSICompactImpl: unsere Fake Implementation basiert jetzt auf ZMLs die in der Jar
	über die PSICompact ID-Liste verknüpft sind.
	
- Zeitreihen Repository Browser:
	* Neue Aktion: 'Export als' - Exportiert die ausgewählte Zeitreihe als lokale Datei.
	Dabei wird ein kurzes Wizard geöffnet mit Datum und Datei-Angabe.
	* Jetzt mit Icons
	* Wenn die Einstellungen für Datum Von-Bis geändert wurden, dann wird der Observation
	cache gelöscht.

- Observation Diagramm und Grafik-Tool:
	* N wird mit transparency dargestellt (nur Diagramm, Grafik: N wird auf einem 
	separaten Achse dargestellt)
	* Darstellung von Alarmstufen
	* Markierung von Prognosewerte (mit transparente Hintergrundmarker)
	* Bessere Verwaltung der Farben der unterschiedlichen Kurven
	* Diagrammvorlage: Farben können direkt in der Vorlage spezifiziert werden
	* Bug bei der (mehrfachige) Darstellung der Diagrammachsen ist behoben
	
- Observation Table Viewer:
	* Vorhersagebreich wird markiert
	* Status wird anhand unterschiedlicher Icons angezeigt. Wenn der Benutzer
	ein Wert ändert, ändert sich der Status automatisch auf BIT_USER_MODIFIED.
	
- Synchronisation zwischen Observation Tabelle und Diagramm
	* Die Synchronisation findet statt anhand einer Helper runnable namens
	'SetValuesForDirtyColumns'.
	* In abgeleitete Klassen von AbstractCalcWizardPage kann dieses Vorgehen über ein Aufrauf von
	'registerObservationTableModelChangeListener()'.
	* Im ObservationTableEditor wird dies auch eingestellt.
	
- Dokument Export: Dokumentbausteine für jeder Editorart können exportiert werden.
	TODO: Integration im PrognoseWizard?
	
- GIS Darstellung:
	Koordinatensystem aller Karten ist jetzt Gauss-Krüger 5
	Die fehlenden Gewässer der Spree wurden in der Übersichtskarte ergänzt
	
- DWD Niederschlag-Vorhersage:
    automatisches Uebernehmen der DWD-Rasterdatei (Vorhersage)
    in das Observationrepository

- Weisse Elster Ombrometer:
  ombrometer.gml und ombrometer-Kartenvorlage 
  sind jetzt im WeisseElster-Datenprojekt.
  zusätzlich eine Wizzard-Page zur Kontrolle der Ombrometerdaten

- Weisse Elster Expertenmodus:
  Es wird nun kein Rootnode zur Berechnung mehr angegeben.
  Zur Berechnung wird die "generateResult"-Spalte der Knotentabelle 
  ausgewertet.
  (Im Vorhersagemodus ist weiterhin der RootNode fuer jede WizzardPage
   im .naControl.gml festgelegt)

- Weisse Elster Vorhersage:
  Es wird pro WizzardPage nur ein PegelKnoten berechnet.
  Wenn wir im Grundmodell weitere Knoten als "ErgebnisKnoten" setzen, 
  dann wuerden diese auch Berechnet, ich halte dies aber fuer nicht sinnvoll.
  Vielleicht koennen wir da spaeter eine bessere Loesung liefern, z.B. initial alle
  Pegel berechnen, verbunden mit einer optimierung, die bisher auch noch fehlt.
  Dann wuerden für alle WizzardSeiten zu Beginn (optimierte)Ergebnisse vorliegen.
 
- Spree-Modell:
 	* die Zeitreihen einer Art werden jetzt im Wizard jeweils gemeinsam in 
 	einer Tabelle dargestellt
 	
- Diverse korrigierte Bugs:
	* SetContentThread: bessere handhabung der Thread. Die Klasse heisst jetzt
	SetContentHelper.

- Weisse-Elster-Modell:
   für Zufluesse und Pegel wird jetzt ein InterpolationFilter (1h) verwendet. 
   Die Zufluss-Vorhersage-Zeitreihe ist ebenfalls auf die gemessene ZuflussZR verlinkt. Durch den Filter 
   werden bei einer prognoserechnung default-werte erzeugt, die manuell verändert werden können.

- Spree-Modell:
	- kleinere Bugfixes in der Input-Datenerzeugung
	- Bugfix beim Übertragen der Erzeugten Dateien zum Client -> die .dbf Dateien lassen sich jetzt auch mit dem alten
	Programm lesen (Systemzeit vorher umstellen!)
	- Geodaten für Überleitungen übernommen
	- Gewässergrunddaten überarbeitet zwecks besserer Darstellung
	
- Beim Start eines Vorhersagemodells aus dem Startbildschirm wird jetzt eine Sanduhr angezeigt

- MetadatenExport: 
	- Datum jetzt über Datumseditor editierbar
	- Autor wird mit username vorbelegt
	- UI im Wizard fertig
	
- Bugfix: Login-Abfrage bei fehlenden Rechten (Programmstart):bei Druck auf Cancel ist der Splash nicht verschwunden

- Hochwasser-Perspective: bei fehlendem Server bessere Meldung

----------------------------------------
Start: Stand 12.11.2004 Schulung Dresden
----------------------------------------
