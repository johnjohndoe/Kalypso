package org.kalypso.model.wspm.pdb.db.mapping;

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.kalypso.contribs.java.lang.NumberUtils;

/**
 * Roughness generated by hbm2java
 */
@Entity
@Table(name = "roughness", schema = "pdb")
public class Roughness implements java.io.Serializable, Coefficient, Comparable<Roughness>
{
  private RoughnessId id;

  private PointKind pointKind;

  private BigDecimal KValue;

  private BigDecimal kstValue;

  private String label;

  private String source;

  private String validity;

  private String description;

  private Set<Point> points = new HashSet<Point>( 0 );

  public Roughness( )
  {
  }

  public Roughness( final RoughnessId id, final PointKind pointKind )
  {
    this.id = id;
    this.pointKind = pointKind;
  }

  @Override
  public String toString( )
  {
    return String.format( "%s - %s", id.getName(), label );
  }

  public Roughness( final RoughnessId id, final PointKind pointKind, final BigDecimal KValue, final BigDecimal kstValue, final String label, final String source, final String validity, final String description, final Set<Point> points )
  {
    this.id = id;
    this.pointKind = pointKind;
    this.KValue = KValue;
    this.kstValue = kstValue;
    this.label = label;
    this.source = source;
    this.validity = validity;
    this.description = description;
    this.points = points;
  }

  @Override
  @EmbeddedId
  @AttributeOverrides({ @AttributeOverride(name = "pointKind", column = @Column(name = "point_kind", nullable = false, length = 50)),
      @AttributeOverride(name = "name", column = @Column(name = "name", nullable = false, length = 50)) })
  public RoughnessId getId( )
  {
    return this.id;
  }

  public void setId( final RoughnessId id )
  {
    this.id = id;
  }

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "point_kind", nullable = false, insertable = false, updatable = false)
  public PointKind getPointKind( )
  {
    return this.pointKind;
  }

  public void setPointKind( final PointKind pointKind )
  {
    this.pointKind = pointKind;
  }

  @Column(name = "k_value", precision = 8, scale = 1)
  public BigDecimal getKValue( )
  {
    return this.KValue;
  }

  public void setKValue( final BigDecimal KValue )
  {
    this.KValue = KValue;
  }

  @Column(name = "kst_value", precision = 8, scale = 1)
  public BigDecimal getKstValue( )
  {
    return this.kstValue;
  }

  public void setKstValue( final BigDecimal kstValue )
  {
    this.kstValue = kstValue;
  }

  @Column(name = "label", length = 100)
  public String getLabel( )
  {
    return this.label;
  }

  public void setLabel( final String label )
  {
    this.label = label;
  }

  @Column(name = "source", length = 255)
  public String getSource( )
  {
    return this.source;
  }

  public void setSource( final String source )
  {
    this.source = source;
  }

  @Column(name = "validity", length = 255)
  public String getValidity( )
  {
    return this.validity;
  }

  public void setValidity( final String validity )
  {
    this.validity = validity;
  }

  @Column(name = "description")
  public String getDescription( )
  {
    return this.description;
  }

  public void setDescription( final String description )
  {
    this.description = description;
  }

  @OneToMany(fetch = FetchType.LAZY, mappedBy = "roughness")
  public Set<Point> getPoints( )
  {
    return this.points;
  }

  public void setPoints( final Set<Point> points )
  {
    this.points = points;
  }

  @Override
  public int compareTo( final Roughness o )
  {
    final String name = id.getName();
    final String otherName = o.id.getName();

    final Integer nameValue = NumberUtils.parseQuietInteger( name );
    final Integer otherNameValue = NumberUtils.parseQuietInteger( otherName );
    if( nameValue != null && otherNameValue != null )
      return nameValue.compareTo( otherNameValue );

    return name.compareToIgnoreCase( otherName );
  }
}